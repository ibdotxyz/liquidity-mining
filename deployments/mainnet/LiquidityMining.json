{
  "address": "0xc640A79205706062Bf0277A466821A6130A8f78E",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "speed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "UpdateBorrowRewardSpeed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowIndex",
          "type": "uint256"
        }
      ],
      "name": "UpdateBorrowerRewardIndex",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "isDebtor",
          "type": "bool"
        }
      ],
      "name": "UpdateDebtor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "supplier",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "supplyIndex",
          "type": "uint256"
        }
      ],
      "name": "UpdateSupplierRewardIndex",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "speed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "UpdateSupplyRewardSpeed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "_addRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "cTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "speeds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "starts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ends",
          "type": "uint256[]"
        }
      ],
      "name": "_setRewardBorrowSpeeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "cTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "speeds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "starts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ends",
          "type": "uint256[]"
        }
      ],
      "name": "_setRewardSupplySpeeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "claimAllRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "holders",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "cTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "rewards",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "borrowers",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "suppliers",
          "type": "bool"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "debtors",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardTokenList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_comptroller",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardAccrued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardBorrowSpeeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "speed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardBorrowState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardBorrowerIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardSupplierIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardSupplySpeeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "speed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardSupplyState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardTokensMap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "borrowers",
          "type": "address[]"
        }
      ],
      "name": "updateBorrowIndex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "updateDebtors",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "suppliers",
          "type": "address[]"
        }
      ],
      "name": "updateSupplyIndex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf45545a35466d14c29996462364ceed7888c83f9a2bb027f89472e2068b516a0",
  "receipt": {
    "to": null,
    "from": "0x1BA608D6a354fbEb41FD7cC799e7f09b2612AB26",
    "contractAddress": "0xc640A79205706062Bf0277A466821A6130A8f78E",
    "transactionIndex": 108,
    "gasUsed": "3097196",
    "logsBloom": "0x
    "blockHash": "0x8ab55c5a6b3f1c26f8bfc40fe03afaab39a4a0d19de236bc2dad00f74f5bec03",
    "transactionHash": "0xf45545a35466d14c29996462364ceed7888c83f9a2bb027f89472e2068b516a0",
    "logs": [],
    "blockNumber": 14607477,
    "cumulativeGasUsed": "8586450",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d1312082e23a94c9e06e25fcdbccf791",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"speed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"UpdateBorrowRewardSpeed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"}],\"name\":\"UpdateBorrowerRewardIndex\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isDebtor\",\"type\":\"bool\"}],\"name\":\"UpdateDebtor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supplyIndex\",\"type\":\"uint256\"}],\"name\":\"UpdateSupplierRewardIndex\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"speed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"UpdateSupplyRewardSpeed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"_addRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"cTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"speeds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"starts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ends\",\"type\":\"uint256[]\"}],\"name\":\"_setRewardBorrowSpeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"cTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"speeds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"starts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ends\",\"type\":\"uint256[]\"}],\"name\":\"_setRewardSupplySpeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"claimAllRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"holders\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"cTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"rewards\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"borrowers\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"suppliers\",\"type\":\"bool\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"debtors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_comptroller\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardBorrowSpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"speed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardBorrowState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardBorrowerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardSupplierIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardSupplySpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"speed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardSupplyState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardTokensMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"borrowers\",\"type\":\"address[]\"}],\"name\":\"updateBorrowIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"updateDebtors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"suppliers\",\"type\":\"address[]\"}],\"name\":\"updateSupplyIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_addRewardToken(address)\":{\"params\":{\"rewardToken\":\"The new reward token\"}},\"_setRewardBorrowSpeeds(address,address[],uint256[],uint256[],uint256[])\":{\"params\":{\"cTokens\":\"The addresses of cTokens\",\"ends\":\"The list of end timestamps\",\"rewardToken\":\"The reward token\",\"speeds\":\"The list of reward speeds\",\"starts\":\"The list of start timestamps\"}},\"_setRewardSupplySpeeds(address,address[],uint256[],uint256[],uint256[])\":{\"params\":{\"cTokens\":\"The addresses of cTokens\",\"ends\":\"The list of end timestamps\",\"rewardToken\":\"The reward token\",\"speeds\":\"The list of reward speeds\",\"starts\":\"The list of start timestamps\"}},\"claimAllRewards(address)\":{\"params\":{\"holder\":\"The address to claim rewards for\"}},\"claimRewards(address[],address[],address[],bool,bool)\":{\"params\":{\"borrowers\":\"Whether or not to claim rewards earned by borrowing\",\"cTokens\":\"The list of markets to claim rewards in\",\"holders\":\"The addresses to claim rewards for\",\"rewards\":\"The list of reward tokens to claim\",\"suppliers\":\"Whether or not to claim rewards earned by supplying\"}},\"getBlockTimestamp()\":{\"returns\":{\"_0\":\"The current block timestamp\"}},\"getRewardTokenList()\":{\"returns\":{\"_0\":\"The list of reward token addresses\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateBorrowIndex(address,address[])\":{\"params\":{\"borrowers\":\"The related borrowers\",\"cToken\":\"The market whose borrow index to update\"}},\"updateDebtors(address[])\":{\"params\":{\"accounts\":\"The list of accounts to be updated\"}},\"updateSupplyIndex(address,address[])\":{\"params\":{\"cToken\":\"The market whose supply index to update\",\"suppliers\":\"The related suppliers\"}}},\"version\":1},\"userdoc\":{\"events\":{\"TransferReward(address,address,uint256)\":{\"notice\":\"Emitted when rewards are transferred to a user\"},\"UpdateBorrowRewardSpeed(address,address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when a market's reward borrow speed is updated\"},\"UpdateBorrowerRewardIndex(address,address,address,uint256,uint256)\":{\"notice\":\"Emitted when a borrower's reward borrower index is updated\"},\"UpdateDebtor(address,bool)\":{\"notice\":\"Emitted when a debtor is updated\"},\"UpdateSupplierRewardIndex(address,address,address,uint256,uint256)\":{\"notice\":\"Emitted when a supplier's reward supply index is updated\"},\"UpdateSupplyRewardSpeed(address,address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when a market's reward supply speed is updated\"}},\"kind\":\"user\",\"methods\":{\"_addRewardToken(address)\":{\"notice\":\"Add new reward token. Revert if the reward token has been added\"},\"_setRewardBorrowSpeeds(address,address[],uint256[],uint256[],uint256[])\":{\"notice\":\"Set cTokens reward borrow speeds\"},\"_setRewardSupplySpeeds(address,address[],uint256[],uint256[],uint256[])\":{\"notice\":\"Set cTokens reward supply speeds\"},\"claimAllRewards(address)\":{\"notice\":\"Claim all the rewards accrued by holder in all markets\"},\"claimRewards(address[],address[],address[],bool,bool)\":{\"notice\":\"Claim the rewards accrued by the holders\"},\"comptroller()\":{\"notice\":\"The comptroller that wants to distribute rewards.\"},\"debtors(address)\":{\"notice\":\"The debtors who can't claim rewards until their bad debts are repaid.\"},\"getBlockTimestamp()\":{\"notice\":\"Return the current block timestamp.\"},\"getRewardTokenList()\":{\"notice\":\"Return the reward token list.\"},\"initialize(address,address)\":{\"notice\":\"Initialize the contract with admin and comptroller\"},\"rewardAccrued(address,address)\":{\"notice\":\"The reward accrued but not yet transferred to each user\"},\"rewardBorrowSpeeds(address,address)\":{\"notice\":\"The reward speeds of each reward token for every borrow market\"},\"rewardBorrowState(address,address)\":{\"notice\":\"The market reward borrow state for each market\"},\"rewardBorrowerIndex(address,address,address)\":{\"notice\":\"The borrow index for each market for each borrower as of the last time they accrued rewards\"},\"rewardSupplierIndex(address,address,address)\":{\"notice\":\"The supply index for each market for each supplier as of the last time they accrued rewards\"},\"rewardSupplySpeeds(address,address)\":{\"notice\":\"The reward speeds of each reward token for every supply market\"},\"rewardSupplyState(address,address)\":{\"notice\":\"The market reward supply state for each market\"},\"rewardTokens(uint256)\":{\"notice\":\"The support reward tokens.\"},\"rewardTokensMap(address)\":{\"notice\":\"The support reward tokens.\"},\"updateBorrowIndex(address,address[])\":{\"notice\":\"Accrue rewards to the market by updating the borrow index and calculate rewards accrued by borrowers\"},\"updateDebtors(address[])\":{\"notice\":\"Update accounts to be debtors or not. Debtors couldn't claim rewards until their bad debts are repaid.\"},\"updateSupplyIndex(address,address[])\":{\"notice\":\"Accrue rewards to the market by updating the supply index and calculate rewards accrued by suppliers\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LiquidityMining.sol\":\"LiquidityMining\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc68cad93ce702131a09334e8705d4af062278defa99627a2c94685fb96ff8cc4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal initializer {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(address newImplementation, bytes memory data, bool forceCall) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\n                    \\\"upgradeTo(address)\\\",\\n                    oldImplementation\\n                )\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _setImplementation(newImplementation);\\n            emit Upgraded(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(\\n            AddressUpgradeable.isContract(newBeacon),\\n            \\\"ERC1967: new beacon is not a contract\\\"\\n        );\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /*\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xda94a85ba0a26d49cd327cc63b8b54fa5dde8f5d1c5f3c942237096ef896eff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xce27d2053e9b7a970532947213c84eed0289ada2d9a91c92b7e1e15f3a466c54\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Base contract for building openzeppelin-upgrades compatible implementations for the {ERC1967Proxy}. It includes\\n * publicly available upgrade functions that are called by the plugin and by the secure upgrade mechanism to verify\\n * continuation of the upgradability.\\n *\\n * The {_authorizeUpgrade} function MUST be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal initializer {\\n    }\\n    function upgradeTo(address newImplementation) external virtual {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6014667ab9e057c1810fcb7ef844123c581a34eb8dafc1aaa15f4e0f704620b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5642ae1d6b33c5c0b71a8412c6c64cbcf2468b84a002bee3e33cdb5644d25cdb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8e9eb503de1189f50c5f16fef327da310b11898d6b9ab3ca937df07c35233b9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc15eeb888d421aa4dedf46768a0502590d88911cfe5750d3ab9f644a7e5ada95\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"contracts/LiquidityMining.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"./LiquidityMiningStorage.sol\\\";\\nimport \\\"./interfaces/ComptrollerInterface.sol\\\";\\nimport \\\"./interfaces/CTokenInterface.sol\\\";\\nimport \\\"./interfaces/LiquidityMiningInterface.sol\\\";\\n\\ncontract LiquidityMining is Initializable, UUPSUpgradeable, OwnableUpgradeable, LiquidityMiningStorage, LiquidityMiningInterface {\\n    using SafeERC20 for IERC20;\\n\\n    uint internal constant initialIndex = 1e18;\\n    address public constant ethAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /**\\n     * @notice Emitted when a supplier's reward supply index is updated\\n     */\\n    event UpdateSupplierRewardIndex(\\n        address indexed rewardToken,\\n        address indexed cToken,\\n        address indexed supplier,\\n        uint rewards,\\n        uint supplyIndex\\n    );\\n\\n    /**\\n     * @notice Emitted when a borrower's reward borrower index is updated\\n     */\\n    event UpdateBorrowerRewardIndex(\\n        address indexed rewardToken,\\n        address indexed cToken,\\n        address indexed borrower,\\n        uint rewards,\\n        uint borrowIndex\\n    );\\n\\n    /**\\n     * @notice Emitted when a market's reward supply speed is updated\\n     */\\n    event UpdateSupplyRewardSpeed(\\n        address indexed rewardToken,\\n        address indexed cToken,\\n        uint indexed speed,\\n        uint start,\\n        uint end\\n    );\\n\\n    /**\\n     * @notice Emitted when a market's reward borrow speed is updated\\n     */\\n    event UpdateBorrowRewardSpeed(\\n        address indexed rewardToken,\\n        address indexed cToken,\\n        uint indexed speed,\\n        uint start,\\n        uint end\\n    );\\n\\n    /**\\n     * @notice Emitted when rewards are transferred to a user\\n     */\\n    event TransferReward(\\n        address indexed rewardToken,\\n        address indexed account,\\n        uint indexed amount\\n    );\\n\\n    /**\\n     * @notice Emitted when a debtor is updated\\n     */\\n    event UpdateDebtor(\\n        address indexed account,\\n        bool indexed isDebtor\\n    );\\n\\n    /**\\n     * @notice Initialize the contract with admin and comptroller\\n     */\\n    function initialize(address _admin, address _comptroller) initializer public {\\n        __Ownable_init();\\n\\n        comptroller = _comptroller;\\n        transferOwnership(_admin);\\n    }\\n\\n    /**\\n     * @notice Contract might receive ETH as one of the LM rewards.\\n     */\\n    receive() external payable {}\\n\\n    /* User functions */\\n\\n    /**\\n     * @notice Accrue rewards to the market by updating the supply index and calculate rewards accrued by suppliers\\n     * @param cToken The market whose supply index to update\\n     * @param suppliers The related suppliers\\n     */\\n    function updateSupplyIndex(address cToken, address[] memory suppliers) external override {\\n        // Distribute the rewards right away.\\n        updateSupplyIndexInternal(rewardTokens, cToken, suppliers, true);\\n    }\\n\\n    /**\\n     * @notice Accrue rewards to the market by updating the borrow index and calculate rewards accrued by borrowers\\n     * @param cToken The market whose borrow index to update\\n     * @param borrowers The related borrowers\\n     */\\n    function updateBorrowIndex(address cToken, address[] memory borrowers) external override {\\n        // Distribute the rewards right away.\\n        updateBorrowIndexInternal(rewardTokens, cToken, borrowers, true);\\n    }\\n\\n    /**\\n     * @notice Return the current block timestamp.\\n     * @return The current block timestamp\\n     */\\n    function getBlockTimestamp() public virtual view returns (uint) {\\n        return block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Return the reward token list.\\n     * @return The list of reward token addresses\\n     */\\n    function getRewardTokenList() external view returns (address[] memory) {\\n        return rewardTokens;\\n    }\\n\\n    /**\\n     * @notice Claim all the rewards accrued by holder in all markets\\n     * @param holder The address to claim rewards for\\n     */\\n    function claimAllRewards(address holder) public {\\n        address[] memory holders = new address[](1);\\n        holders[0] = holder;\\n        address[] memory allMarkets = ComptrollerInterface(comptroller).getAllMarkets();\\n        return claimRewards(holders, allMarkets, rewardTokens, true, true);\\n    }\\n\\n    /**\\n     * @notice Claim the rewards accrued by the holders\\n     * @param holders The addresses to claim rewards for\\n     * @param cTokens The list of markets to claim rewards in\\n     * @param rewards The list of reward tokens to claim\\n     * @param borrowers Whether or not to claim rewards earned by borrowing\\n     * @param suppliers Whether or not to claim rewards earned by supplying\\n     */\\n    function claimRewards(address[] memory holders, address[] memory cTokens, address[] memory rewards, bool borrowers, bool suppliers) public {\\n        for (uint i = 0; i < cTokens.length; i++) {\\n            address cToken = cTokens[i];\\n            (bool isListed, , ) = ComptrollerInterface(comptroller).markets(cToken);\\n            require(isListed, \\\"market must be listed\\\");\\n\\n            // Same reward generated from multiple markets could aggregate and distribute once later for gas consumption.\\n            if (borrowers) {\\n                updateBorrowIndexInternal(rewards, cToken, holders, false);\\n            }\\n            if (suppliers) {\\n                updateSupplyIndexInternal(rewards, cToken, holders, false);\\n            }\\n        }\\n\\n        // Distribute the rewards.\\n        for (uint i = 0; i < rewards.length; i++) {\\n            for (uint j = 0; j < holders.length; j++) {\\n                address rewardToken = rewards[i];\\n                address holder = holders[j];\\n                rewardAccrued[rewardToken][holder] = transferReward(rewardToken, holder, rewardAccrued[rewardToken][holder]);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Update accounts to be debtors or not. Debtors couldn't claim rewards until their bad debts are repaid.\\n     * @param accounts The list of accounts to be updated\\n     */\\n    function updateDebtors(address[] memory accounts) external {\\n        for (uint i = 0; i < accounts.length; i++) {\\n            address account = accounts[i];\\n            (uint err, , uint shortfall) = ComptrollerInterface(comptroller).getAccountLiquidity(account);\\n            require(err == 0, \\\"failed to get account liquidity from comptroller\\\");\\n\\n            if (shortfall > 0 && !debtors[account]) {\\n                debtors[account] = true;\\n                emit UpdateDebtor(account, true);\\n            } else if (shortfall == 0 && debtors[account]) {\\n                debtors[account] = false;\\n                emit UpdateDebtor(account, false);\\n            }\\n        }\\n    }\\n\\n    /* Admin functions */\\n\\n    /**\\n     * @notice Add new reward token. Revert if the reward token has been added\\n     * @param rewardToken The new reward token\\n     */\\n    function _addRewardToken(address rewardToken) external onlyOwner {\\n        require(!rewardTokensMap[rewardToken], \\\"reward token has been added\\\");\\n        rewardTokensMap[rewardToken] = true;\\n        rewardTokens.push(rewardToken);\\n    }\\n\\n    /**\\n     * @notice Set cTokens reward supply speeds\\n     * @param rewardToken The reward token\\n     * @param cTokens The addresses of cTokens\\n     * @param speeds The list of reward speeds\\n     * @param starts The list of start timestamps\\n     * @param ends The list of end timestamps\\n     */\\n    function _setRewardSupplySpeeds(address rewardToken, address[] memory cTokens, uint[] memory speeds, uint[] memory starts, uint[] memory ends) external onlyOwner {\\n        _setRewardSpeeds(rewardToken, cTokens, speeds, starts, ends, true);\\n    }\\n\\n    /**\\n     * @notice Set cTokens reward borrow speeds\\n     * @param rewardToken The reward token\\n     * @param cTokens The addresses of cTokens\\n     * @param speeds The list of reward speeds\\n     * @param starts The list of start timestamps\\n     * @param ends The list of end timestamps\\n     */\\n    function _setRewardBorrowSpeeds(address rewardToken, address[] memory cTokens, uint[] memory speeds, uint[] memory starts, uint[] memory ends) external onlyOwner {\\n        _setRewardSpeeds(rewardToken, cTokens, speeds, starts, ends, false);\\n    }\\n\\n    /* Internal functions */\\n\\n    /**\\n     * @dev _authorizeUpgrade is used by UUPSUpgradeable to determine if it's allowed to upgrade a proxy implementation.\\n     * @param newImplementation The new implementation\\n     *\\n     * Ref: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/utils/UUPSUpgradeable.sol\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n    /**\\n     * @notice Given the reward token list, accrue rewards to the market by updating the supply index and calculate rewards accrued by suppliers\\n     * @param rewards The list of rewards to update\\n     * @param cToken The market whose supply index to update\\n     * @param suppliers The related suppliers\\n     * @param distribute Distribute the reward or not\\n     */\\n    function updateSupplyIndexInternal(address[] memory rewards, address cToken, address[] memory suppliers, bool distribute) internal {\\n        for (uint i = 0; i < rewards.length; i++) {\\n            require(rewardTokensMap[rewards[i]], \\\"reward token not support\\\");\\n            updateGlobalSupplyIndex(rewards[i], cToken);\\n            for (uint j = 0; j < suppliers.length; j++) {\\n                updateUserSupplyIndex(rewards[i], cToken, suppliers[j], distribute);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Given the reward token list, accrue rewards to the market by updating the borrow index and calculate rewards accrued by borrowers\\n     * @param rewards The list of rewards to update\\n     * @param cToken The market whose borrow index to update\\n     * @param borrowers The related borrowers\\n     * @param distribute Distribute the reward or not\\n     */\\n    function updateBorrowIndexInternal(address[] memory rewards, address cToken, address[] memory borrowers, bool distribute) internal {\\n        for (uint i = 0; i < rewards.length; i++) {\\n            require(rewardTokensMap[rewards[i]], \\\"reward token not support\\\");\\n\\n            uint marketBorrowIndex = CTokenInterface(cToken).borrowIndex();\\n            updateGlobalBorrowIndex(rewards[i], cToken, marketBorrowIndex);\\n            for (uint j = 0; j < borrowers.length; j++) {\\n                updateUserBorrowIndex(rewards[i], cToken, borrowers[j], marketBorrowIndex, distribute);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Accrue rewards to the market by updating the supply index\\n     * @param rewardToken The reward token\\n     * @param cToken The market whose supply index to update\\n     */\\n    function updateGlobalSupplyIndex(address rewardToken, address cToken) internal {\\n        RewardState storage supplyState = rewardSupplyState[rewardToken][cToken];\\n        RewardSpeed memory supplySpeed = rewardSupplySpeeds[rewardToken][cToken];\\n        uint timestamp = getBlockTimestamp();\\n        if (timestamp > supplyState.timestamp) {\\n            if (supplySpeed.speed == 0 || supplySpeed.start > timestamp || supplyState.timestamp > supplySpeed.end) {\\n                // 1. The reward speed is zero,\\n                // 2. The reward hasn't started yet,\\n                // 3. The supply state has handled the end of the reward,\\n                // just update the timestamp.\\n                supplyState.timestamp = timestamp;\\n            } else {\\n                // fromTimestamp is the max of the last update block timestamp and the reward start block timestamp.\\n                uint fromTimestamp = max(supplyState.timestamp, supplySpeed.start);\\n                // toTimestamp is the min of the current block timestamp and the reward end block timestamp.\\n                uint toTimestamp = min(timestamp, supplySpeed.end);\\n                // deltaTime is the time difference used for calculating the rewards.\\n                uint deltaTime = toTimestamp - fromTimestamp;\\n                uint rewardAccrued = deltaTime * supplySpeed.speed;\\n                uint totalSupply = CTokenInterface(cToken).totalSupply();\\n                uint ratio = totalSupply > 0 ? rewardAccrued * 1e18 / totalSupply : 0;\\n                uint index = supplyState.index + ratio;\\n                rewardSupplyState[rewardToken][cToken] = RewardState({\\n                    index: index,\\n                    timestamp: timestamp\\n                });\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Accrue rewards to the market by updating the borrow index\\n     * @param rewardToken The reward token\\n     * @param cToken The market whose borrow index to update\\n     * @param marketBorrowIndex The market borrow index\\n     */\\n    function updateGlobalBorrowIndex(address rewardToken, address cToken, uint marketBorrowIndex) internal {\\n        RewardState storage borrowState = rewardBorrowState[rewardToken][cToken];\\n        RewardSpeed memory borrowSpeed = rewardBorrowSpeeds[rewardToken][cToken];\\n        uint timestamp = getBlockTimestamp();\\n        if (timestamp > borrowState.timestamp) {\\n            if (borrowSpeed.speed == 0 || timestamp < borrowSpeed.start || borrowState.timestamp > borrowSpeed.end) {\\n                // 1. The reward speed is zero,\\n                // 2. The reward hasn't started yet,\\n                // 3. The borrow state has handled the end of the reward,\\n                // just update the timestamp.\\n                borrowState.timestamp = timestamp;\\n            } else {\\n                // fromTimestamp is the max of the last update block timestamp and the reward start block timestamp.\\n                uint fromTimestamp = max(borrowState.timestamp, borrowSpeed.start);\\n                // toTimestamp is the min of the current block timestamp and the reward end block timestamp.\\n                uint toTimestamp = min(timestamp, borrowSpeed.end);\\n                // deltaTime is the time difference used for calculating the rewards.\\n                uint deltaTime = toTimestamp - fromTimestamp;\\n                uint rewardAccrued = deltaTime * borrowSpeed.speed;\\n                uint totalBorrows = CTokenInterface(cToken).totalBorrows() * 1e18 / marketBorrowIndex;\\n                uint ratio = totalBorrows > 0 ? rewardAccrued * 1e18 / totalBorrows : 0;\\n                uint index = borrowState.index + ratio;\\n                rewardBorrowState[rewardToken][cToken] = RewardState({\\n                    index: index,\\n                    timestamp: timestamp\\n                });\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate rewards accrued by a supplier and possibly transfer it to them\\n     * @dev Suppliers will not begin to accrue until after the first interaction with the protocol.\\n     * @param rewardToken The reward token\\n     * @param cToken The market in which the supplier is interacting\\n     * @param supplier The address of the supplier to distribute rewards to\\n     * @param distribute Distribute the reward or not\\n     */\\n    function updateUserSupplyIndex(address rewardToken, address cToken, address supplier, bool distribute) internal {\\n        RewardState memory supplyState = rewardSupplyState[rewardToken][cToken];\\n        uint supplyIndex = supplyState.index;\\n        uint supplierIndex = rewardSupplierIndex[rewardToken][cToken][supplier];\\n        rewardSupplierIndex[rewardToken][cToken][supplier] = supplyIndex;\\n\\n        if (supplierIndex > 0) {\\n            uint deltaIndex = supplyIndex - supplierIndex;\\n            uint supplierTokens = CTokenInterface(cToken).balanceOf(supplier);\\n            uint supplierDelta = supplierTokens * deltaIndex / 1e18;\\n            uint accruedAmount = rewardAccrued[rewardToken][supplier] + supplierDelta;\\n            if (distribute) {\\n                rewardAccrued[rewardToken][supplier] = transferReward(rewardToken, supplier, accruedAmount);\\n            } else {\\n                rewardAccrued[rewardToken][supplier] = accruedAmount;\\n            }\\n            emit UpdateSupplierRewardIndex(rewardToken, cToken, supplier, supplierDelta, supplyIndex);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate rewards accrued by a borrower and possibly transfer it to them\\n     * @dev Borrowers will not begin to accrue until after the first interaction with the protocol.\\n     * @param rewardToken The reward token\\n     * @param cToken The market in which the borrower is interacting\\n     * @param borrower The address of the borrower to distribute rewards to\\n     * @param marketBorrowIndex The market borrow index\\n     * @param distribute Distribute the reward or not\\n     */\\n    function updateUserBorrowIndex(address rewardToken, address cToken, address borrower, uint marketBorrowIndex, bool distribute) internal {\\n        RewardState memory borrowState = rewardBorrowState[rewardToken][cToken];\\n        uint borrowIndex = borrowState.index;\\n        uint borrowerIndex = rewardBorrowerIndex[rewardToken][cToken][borrower];\\n        rewardBorrowerIndex[rewardToken][cToken][borrower] = borrowIndex;\\n\\n        if (borrowerIndex > 0) {\\n            uint deltaIndex = borrowIndex - borrowerIndex;\\n            uint borrowerAmount = CTokenInterface(cToken).borrowBalanceStored(borrower) * 1e18 / marketBorrowIndex;\\n            uint borrowerDelta = borrowerAmount * deltaIndex / 1e18;\\n            uint accruedAmount = rewardAccrued[rewardToken][borrower] + borrowerDelta;\\n            if (distribute) {\\n                rewardAccrued[rewardToken][borrower] = transferReward(rewardToken, borrower, accruedAmount);\\n            } else {\\n                rewardAccrued[rewardToken][borrower] = accruedAmount;\\n            }\\n            emit UpdateBorrowerRewardIndex(rewardToken, cToken, borrower, borrowerDelta, borrowIndex);\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer rewards to the user\\n     * @param rewardToken The reward token\\n     * @param user The address of the user to transfer rewards to\\n     * @param amount The amount of rewards to (possibly) transfer\\n     * @return The amount of rewards which was NOT transferred to the user\\n     */\\n    function transferReward(address rewardToken, address user, uint amount) internal returns (uint) {\\n        uint remain = rewardToken == ethAddress ? address(this).balance : IERC20(rewardToken).balanceOf(address(this));\\n        if (amount > 0 && amount <= remain && !debtors[user]) {\\n            if (rewardToken == ethAddress) {\\n                payable(user).transfer(amount);\\n            } else {\\n                IERC20(rewardToken).safeTransfer(user, amount);\\n            }\\n            emit TransferReward(rewardToken, user, amount);\\n            return 0;\\n        }\\n        return amount;\\n    }\\n\\n    /**\\n     * @notice Set reward speeds\\n     * @param rewardToken The reward token\\n     * @param cTokens The addresses of cTokens\\n     * @param speeds The list of reward speeds\\n     * @param starts The list of start timestamps\\n     * @param ends The list of end timestamp\\n     * @param supply It's supply speed or borrow speed\\n     */\\n    function _setRewardSpeeds(address rewardToken, address[] memory cTokens, uint[] memory speeds, uint[] memory starts, uint[] memory ends, bool supply) internal {\\n        uint timestamp = getBlockTimestamp();\\n        uint numMarkets = cTokens.length;\\n        require(numMarkets != 0 && numMarkets == speeds.length && numMarkets == starts.length && numMarkets == ends.length, \\\"invalid input\\\");\\n        require(rewardTokensMap[rewardToken], \\\"reward token was not added\\\");\\n\\n        for (uint i = 0; i < numMarkets; i++) {\\n            address cToken = cTokens[i];\\n            uint speed = speeds[i];\\n            uint start = starts[i];\\n            uint end = ends[i];\\n            if (supply) {\\n                if (isSupplyRewardStateInit(rewardToken, cToken)) {\\n                    // Update the supply index.\\n                    updateGlobalSupplyIndex(rewardToken, cToken);\\n                } else {\\n                    // Initialize the supply index.\\n                    rewardSupplyState[rewardToken][cToken] = RewardState({\\n                        index: initialIndex,\\n                        timestamp: timestamp\\n                    });\\n                }\\n\\n                validateRewardContent(rewardSupplySpeeds[rewardToken][cToken], start, end);\\n                rewardSupplySpeeds[rewardToken][cToken] = RewardSpeed({\\n                    speed: speed,\\n                    start: start,\\n                    end: end\\n                });\\n                emit UpdateSupplyRewardSpeed(rewardToken, cToken, speed, start, end);\\n            } else {\\n                if (isBorrowRewardStateInit(rewardToken, cToken)) {\\n                    // Update the borrow index.\\n                    uint marketBorrowIndex = CTokenInterface(cToken).borrowIndex();\\n                    updateGlobalBorrowIndex(rewardToken, cToken, marketBorrowIndex);\\n                } else {\\n                    // Initialize the borrow index.\\n                    rewardBorrowState[rewardToken][cToken] = RewardState({\\n                        index: initialIndex,\\n                        timestamp: timestamp\\n                    });\\n                }\\n\\n                validateRewardContent(rewardBorrowSpeeds[rewardToken][cToken], start, end);\\n                rewardBorrowSpeeds[rewardToken][cToken] = RewardSpeed({\\n                    speed: speed,\\n                    start: start,\\n                    end: end\\n                });\\n                emit UpdateBorrowRewardSpeed(rewardToken, cToken, speed, start, end);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to tell if the supply reward state is initialized or not.\\n     * @param rewardToken The reward token\\n     * @param cToken The market\\n     * @return It's initialized or not\\n     */\\n    function isSupplyRewardStateInit(address rewardToken, address cToken) internal view returns (bool) {\\n        return rewardSupplyState[rewardToken][cToken].index != 0 && rewardSupplyState[rewardToken][cToken].timestamp != 0;\\n    }\\n\\n    /**\\n     * @notice Internal function to tell if the borrow reward state is initialized or not.\\n     * @param rewardToken The reward token\\n     * @param cToken The market\\n     * @return It's initialized or not\\n     */\\n    function isBorrowRewardStateInit(address rewardToken, address cToken) internal view returns (bool) {\\n        return rewardBorrowState[rewardToken][cToken].index != 0 && rewardBorrowState[rewardToken][cToken].timestamp != 0;\\n    }\\n\\n    /**\\n     * @notice Internal function to check the new start block timestamp and the end block timestamp.\\n     * @dev This function will revert if any validation failed.\\n     * @param currentSpeed The current reward speed\\n     * @param newStart The new start timestamp\\n     * @param newEnd The new end block timestamp\\n     */\\n    function validateRewardContent(RewardSpeed memory currentSpeed, uint newStart, uint newEnd) internal view {\\n        uint timestamp = getBlockTimestamp();\\n        require(newEnd >= timestamp, \\\"the end timestamp must be greater than the current timestamp\\\");\\n        require(newEnd >= newStart, \\\"the end timestamp must be greater than the start timestamp\\\");\\n        if (timestamp < currentSpeed.end && timestamp > currentSpeed.start && currentSpeed.start != 0) {\\n            require(currentSpeed.start == newStart, \\\"cannot change the start timestamp after the reward starts\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to get the min value of two.\\n     * @param a The first value\\n     * @param b The second value\\n     * @return The min one\\n     */\\n    function min(uint a, uint b) internal pure returns (uint) {\\n        if (a < b) {\\n            return a;\\n        }\\n        return b;\\n    }\\n\\n    /**\\n     * @notice Internal function to get the max value of two.\\n     * @param a The first value\\n     * @param b The second value\\n     * @return The max one\\n     */\\n    function max(uint a, uint b) internal pure returns (uint) {\\n        if (a > b) {\\n            return a;\\n        }\\n        return b;\\n    }\\n}\\n\",\"keccak256\":\"0x34307db2e6dd7a59ecc05a43a81298aba089c98fcb282bf35d128afb6c513ef6\",\"license\":\"MIT\"},\"contracts/LiquidityMiningStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ncontract LiquidityMiningStorage {\\n    /// @notice The comptroller that wants to distribute rewards.\\n    address public comptroller;\\n\\n    /// @notice The support reward tokens.\\n    address[] public rewardTokens;\\n\\n    /// @notice The support reward tokens.\\n    mapping(address => bool) public rewardTokensMap;\\n\\n    struct RewardSpeed {\\n        uint speed;\\n        uint start;\\n        uint end;\\n    }\\n\\n    /// @notice The reward speeds of each reward token for every supply market\\n    mapping(address => mapping(address => RewardSpeed)) public rewardSupplySpeeds;\\n\\n    /// @notice The reward speeds of each reward token for every borrow market\\n    mapping(address => mapping(address => RewardSpeed)) public rewardBorrowSpeeds;\\n\\n    struct RewardState {\\n        uint index;\\n        uint timestamp;\\n    }\\n\\n    /// @notice The market reward supply state for each market\\n    mapping(address => mapping(address => RewardState)) public rewardSupplyState;\\n\\n    /// @notice The market reward borrow state for each market\\n    mapping(address => mapping(address => RewardState)) public rewardBorrowState;\\n\\n    /// @notice The supply index for each market for each supplier as of the last time they accrued rewards\\n    mapping(address => mapping(address => mapping(address => uint))) public rewardSupplierIndex;\\n\\n    /// @notice The borrow index for each market for each borrower as of the last time they accrued rewards\\n    mapping(address => mapping(address => mapping(address => uint))) public rewardBorrowerIndex;\\n\\n    /// @notice The reward accrued but not yet transferred to each user\\n    mapping(address => mapping(address => uint)) public rewardAccrued;\\n\\n    /// @notice The debtors who can't claim rewards until their bad debts are repaid.\\n    mapping(address => bool) public debtors;\\n}\\n\",\"keccak256\":\"0xf92f43b05c6308360de837677e72c4b4d76845a746d7113613c00437eee57a1e\",\"license\":\"MIT\"},\"contracts/interfaces/CTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface CTokenInterface {\\n    function balanceOf(address owner) external view returns (uint);\\n    function borrowBalanceStored(address account) external view returns (uint);\\n    function borrowIndex() external view returns (uint);\\n    function totalSupply() external view returns (uint);\\n    function totalBorrows() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x4240ba2b8e528bb568924c02e34badf61fb5139910d8be4ff4a74419ca222e73\",\"license\":\"MIT\"},\"contracts/interfaces/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ComptrollerInterface {\\n    function getAllMarkets() external view returns (address[] memory);\\n    function markets(address) external view returns (bool, uint, uint);\\n    function getAccountLiquidity(address) external view returns (uint, uint, uint);\\n}\\n\",\"keccak256\":\"0x4bf6efa0c95de2e903cd5e4d39432268224c4dc0467c99c5d848d0b658215844\",\"license\":\"MIT\"},\"contracts/interfaces/LiquidityMiningInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @dev LiquidityMiningInterface is for comptroller\\ninterface LiquidityMiningInterface {\\n    function updateSupplyIndex(address cToken, address[] memory accounts) external;\\n    function updateBorrowIndex(address cToken, address[] memory accounts) external;\\n}\\n\",\"keccak256\":\"0xfbbb44207ff40da643a05e6513cd888f3a6e69b9f3c4a98add3176785155c6e2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101bb5760003560e01c8063715018a6116100ec578063a3d813b41161008a578063e5029dc811610064578063e5029dc8146105f8578063e991560f14610637578063efbc17fa14610657578063f2fde38b14610677576101c2565b8063a3d813b414610568578063aa6be303146105a8578063e3cec1a2146105d8576101c2565b80638da5cb5b116100c65780638da5cb5b146104e8578063919c224d146105065780639222e57214610526578063969133a814610546576101c2565b8063715018a6146104a0578063796b89b9146104b55780637bb7bed1146104c8576101c2565b8063485cc955116101595780635f3b2802116101335780635f3b2802146103995780635fd85d2f146103fb5780635fe3b5671461044257806360777a4f14610462576101c2565b8063485cc955146103465780634f1ef28614610366578063597b6bba14610379576101c2565b80631f269c34116101955780631f269c3414610272578063317d2abc146102925780633659cfe6146102e657806341398b1514610306576101c2565b8063059123fc146101c75780630bda5be1146101e95780631ad964ed14610234576101c2565b366101c257005b600080fd5b3480156101d357600080fd5b506101e76101e2366004613217565b610697565b005b3480156101f557600080fd5b50610221610204366004612fea565b60d260209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b34801561024057600080fd5b5061022161024f366004613022565b60d060209081526000938452604080852082529284528284209052825290205481565b34801561027e57600080fd5b506101e761028d3660046130ba565b6108d8565b34801561029e57600080fd5b506102d16102ad366004612fea565b60ce6020908152600092835260408084209091529082529020805460019091015482565b6040805192835260208301919091520161022b565b3480156102f257600080fd5b506101e7610301366004612fce565b610918565b34801561031257600080fd5b5061032e73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6040516001600160a01b03909116815260200161022b565b34801561035257600080fd5b506101e7610361366004612fea565b61093f565b6101e7610374366004613175565b6109e2565b34801561038557600080fd5b506101e76103943660046130ba565b6109f7565b3480156103a557600080fd5b506103e06103b4366004612fea565b60cd60209081526000928352604080842090915290825290208054600182015460029092015490919083565b6040805193845260208401929092529082015260600161022b565b34801561040757600080fd5b506103e0610416366004612fea565b60cc60209081526000928352604080842090915290825290208054600182015460029092015490919083565b34801561044e57600080fd5b5060c95461032e906001600160a01b031681565b34801561046e57600080fd5b5061022161047d366004613022565b60d160209081526000938452604080852082529284528284209052825290205481565b3480156104ac57600080fd5b506101e7610a30565b3480156104c157600080fd5b5042610221565b3480156104d457600080fd5b5061032e6104e33660046133e1565b610aa4565b3480156104f457600080fd5b506097546001600160a01b031661032e565b34801561051257600080fd5b506101e7610521366004612fce565b610ace565b34801561053257600080fd5b506101e761054136600461306c565b610bc7565b34801561055257600080fd5b5061055b610c2e565b60405161022b919061345a565b34801561057457600080fd5b50610598610583366004612fce565b60cb6020526000908152604090205460ff1681565b604051901515815260200161022b565b3480156105b457600080fd5b506105986105c3366004612fce565b60d36020526000908152604090205460ff1681565b3480156105e457600080fd5b506101e76105f336600461306c565b610c90565b34801561060457600080fd5b506102d1610613366004612fea565b60cf6020908152600092835260408084209091529082529020805460019091015482565b34801561064357600080fd5b506101e7610652366004612fce565b610cf7565b34801561066357600080fd5b506101e76106723660046132e3565b610e33565b34801561068357600080fd5b506101e7610692366004612fce565b61108e565b60005b81518110156108d45760008282815181106106c557634e487b7160e01b600052603260045260246000fd5b602090810291909101015160c954604051635ec88c7960e01b81526001600160a01b03808416600483015292935060009283921690635ec88c799060240160606040518083038186803b15801561071b57600080fd5b505afa15801561072f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107539190613411565b9250509150816000146107c65760405162461bcd60e51b815260206004820152603060248201527f6661696c656420746f20676574206163636f756e74206c69717569646974792060448201526f333937b69031b7b6b83a3937b63632b960811b60648201526084015b60405180910390fd5b6000811180156107ef57506001600160a01b038316600090815260d3602052604090205460ff16155b15610848576001600160a01b038316600081815260d36020526040808220805460ff1916600190811790915590519092917f26d21015c4930494b63bc148d61540d95bc6c68e8a80cbdd089c41ab839c281b91a36108be565b8015801561086e57506001600160a01b038316600090815260d3602052604090205460ff165b156108be576001600160a01b038316600081815260d36020526040808220805460ff19169055519091907f26d21015c4930494b63bc148d61540d95bc6c68e8a80cbdd089c41ab839c281b908390a35b50505080806108cc9061364c565b91505061069a565b5050565b6097546001600160a01b031633146109025760405162461bcd60e51b81526004016107bd90613528565b61091185858585856000611179565b5050505050565b61092181611740565b61093c8160405180602001604052806000815250600061176a565b50565b600054610100900460ff1680610958575060005460ff16155b6109745760405162461bcd60e51b81526004016107bd906134da565b600054610100900460ff1615801561099f576000805460ff1961ff0019909116610100171660011790555b6109a7611926565b60c980546001600160a01b0319166001600160a01b0384161790556109cb8361108e565b80156109dd576000805461ff00191690555b505050565b6109eb82611740565b6108d48282600161176a565b6097546001600160a01b03163314610a215760405162461bcd60e51b81526004016107bd90613528565b61091185858585856001611179565b6097546001600160a01b03163314610a5a5760405162461bcd60e51b81526004016107bd90613528565b6097546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3609780546001600160a01b0319169055565b60ca8181548110610ab457600080fd5b6000918252602090912001546001600160a01b0316905081565b6097546001600160a01b03163314610af85760405162461bcd60e51b81526004016107bd90613528565b6001600160a01b038116600090815260cb602052604090205460ff1615610b615760405162461bcd60e51b815260206004820152601b60248201527f72657761726420746f6b656e20686173206265656e206164646564000000000060448201526064016107bd565b6001600160a01b0316600081815260cb60205260408120805460ff1916600190811790915560ca805491820181559091527f42d72674974f694b5f5159593243114d38a5c39c89d6b62fee061ff523240ee10180546001600160a01b0319169091179055565b6108d460ca805480602002602001604051908101604052809291908181526020018280548015610c2057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c02575b5050505050838360016119aa565b606060ca805480602002602001604051908101604052809291908181526020018280548015610c8657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c68575b5050505050905090565b6108d460ca805480602002602001604051908101604052809291908181526020018280548015610ce957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ccb575b505050505083836001611b04565b604080516001808252818301909252600091602080830190803683370190505090508181600081518110610d3b57634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260c9546040805163b0772d0b60e01b81529051600093929092169163b0772d0b916004808201928692909190829003018186803b158015610d9157600080fd5b505afa158015610da5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610dcd919081019061324a565b90506109dd828260ca805480602002602001604051908101604052809291908181526020018280548015610e2a57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610e0c575b50505050506001805b60005b8451811015610f73576000858281518110610e6157634e487b7160e01b600052603260045260246000fd5b602090810291909101015160c954604051638e8f294b60e01b81526001600160a01b03808416600483015292935060009290911690638e8f294b9060240160606040518083038186803b158015610eb757600080fd5b505afa158015610ecb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eef91906133ab565b5050905080610f385760405162461bcd60e51b81526020600482015260156024820152741b585c9ad95d081b5d5cdd081899481b1a5cdd1959605a1b60448201526064016107bd565b8415610f4b57610f4b86838a6000611b04565b8315610f5e57610f5e86838a60006119aa565b50508080610f6b9061364c565b915050610e36565b5060005b83518110156110865760005b8651811015611073576000858381518110610fae57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000888381518110610fda57634e487b7160e01b600052603260045260246000fd5b60200260200101519050611037828260d26000866001600160a01b03166001600160a01b031681526020019081526020016000206000856001600160a01b03166001600160a01b0316815260200190815260200160002054611cd7565b6001600160a01b03928316600090815260d26020908152604080832094909516825292909252919020558061106b8161364c565b915050610f83565b508061107e8161364c565b915050610f77565b505050505050565b6097546001600160a01b031633146110b85760405162461bcd60e51b81526004016107bd90613528565b6001600160a01b03811661111d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107bd565b6097546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3609780546001600160a01b0319166001600160a01b0392909216919091179055565b84514290801580159061118c5750855181145b80156111985750845181145b80156111a45750835181145b6111e05760405162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b60448201526064016107bd565b6001600160a01b038816600090815260cb602052604090205460ff166112485760405162461bcd60e51b815260206004820152601a60248201527f72657761726420746f6b656e20776173206e6f7420616464656400000000000060448201526064016107bd565b60005b8181101561173557600088828151811061127557634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008883815181106112a157634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008884815181106112cd57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008885815181106112f957634e487b7160e01b600052603260045260246000fd5b6020026020010151905087156114da576113138d85611e84565b15611327576113228d85611eea565b6113a4565b6040518060400160405280670de0b6b3a764000081526020018881525060ce60008f6001600160a01b03166001600160a01b031681526020019081526020016000206000866001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000155602082015181600101559050505b6001600160a01b03808e16600090815260cc6020908152604080832093881683529281529082902082516060810184528154815260018201549281019290925260020154918101919091526113fa9083836120df565b60405180606001604052808481526020018381526020018281525060cc60008f6001600160a01b03166001600160a01b031681526020019081526020016000206000866001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000155602082015181600101556040820151816002015590505082846001600160a01b03168e6001600160a01b03167f77df4b7dde7e2c2ae957e232182d8b5dac40946e701afd577a281f679221d02a85856040516114cd929190918252602082015260400190565b60405180910390a461171e565b6114e48d85612275565b1561156f576000846001600160a01b031663aa5af0fd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561152457600080fd5b505afa158015611538573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155c91906133f9565b90506115698e86836122d7565b506115ec565b6040518060400160405280670de0b6b3a764000081526020018881525060cf60008f6001600160a01b03166001600160a01b031681526020019081526020016000206000866001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000155602082015181600101559050505b6001600160a01b03808e16600090815260cd6020908152604080832093881683529281529082902082516060810184528154815260018201549281019290925260020154918101919091526116429083836120df565b60405180606001604052808481526020018381526020018281525060cd60008f6001600160a01b03166001600160a01b031681526020019081526020016000206000866001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000155602082015181600101556040820151816002015590505082846001600160a01b03168e6001600160a01b03167ff5ee6756f151aeea2ed0e4ad055ee767f3497691bfb7022292048950c6f70d8a8585604051611715929190918252602082015260400190565b60405180910390a45b50505050808061172d9061364c565b91505061124b565b505050505050505050565b6097546001600160a01b0316331461093c5760405162461bcd60e51b81526004016107bd90613528565b600061179d7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b90506117a88461251b565b6000835111806117b55750815b156117c6576117c484846125c0565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff1661091157805460ff191660011781556040516001600160a01b038316602482015261184590869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b1790526125c0565b50805460ff191681557f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b038381169116146118e25760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b60648201526084016107bd565b6118eb8561251b565b6040516001600160a01b038616907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a25050505050565b600054610100900460ff168061193f575060005460ff16155b61195b5760405162461bcd60e51b81526004016107bd906134da565b600054610100900460ff16158015611986576000805460ff1961ff0019909116610100171660011790555b61198e6126ab565b61199661271e565b801561093c576000805461ff001916905550565b60005b84518110156109115760cb60008683815181106119da57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16611a485760405162461bcd60e51b81526020600482015260186024820152771c995dd85c99081d1bdad95b881b9bdd081cdd5c1c1bdc9d60421b60448201526064016107bd565b611a79858281518110611a6b57634e487b7160e01b600052603260045260246000fd5b602002602001015185611eea565b60005b8351811015611af157611adf868381518110611aa857634e487b7160e01b600052603260045260246000fd5b602002602001015186868481518110611ad157634e487b7160e01b600052603260045260246000fd5b6020026020010151866127d5565b80611ae98161364c565b915050611a7c565b5080611afc8161364c565b9150506119ad565b60005b84518110156109115760cb6000868381518110611b3457634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16611ba25760405162461bcd60e51b81526020600482015260186024820152771c995dd85c99081d1bdad95b881b9bdd081cdd5c1c1bdc9d60421b60448201526064016107bd565b6000846001600160a01b031663aa5af0fd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611bdd57600080fd5b505afa158015611bf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1591906133f9565b9050611c49868381518110611c3a57634e487b7160e01b600052603260045260246000fd5b602002602001015186836122d7565b60005b8451811015611cc257611cb0878481518110611c7857634e487b7160e01b600052603260045260246000fd5b602002602001015187878481518110611ca157634e487b7160e01b600052603260045260246000fd5b602002602001015185886129f8565b80611cba8161364c565b915050611c4c565b50508080611ccf9061364c565b915050611b07565b6000806001600160a01b03851673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14611d7a576040516370a0823160e01b81523060048201526001600160a01b038616906370a082319060240160206040518083038186803b158015611d3d57600080fd5b505afa158015611d51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7591906133f9565b611d7c565b475b9050600083118015611d8e5750808311155b8015611db357506001600160a01b038416600090815260d3602052604090205460ff16155b15611e78576001600160a01b03851673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415611e19576040516001600160a01b0385169084156108fc029085906000818181858888f19350505050158015611e13573d6000803e3d6000fd5b50611e2d565b611e2d6001600160a01b0386168585612c3b565b82846001600160a01b0316866001600160a01b03167f4332d3aac8bbc1ec65700cf5d1235e2118fe56b06c41aaf3e9627fb19a39b1bf60405160405180910390a46000915050611e7d565b829150505b9392505050565b6001600160a01b03808316600090815260ce6020908152604080832093851683529290529081205415801590611ee157506001600160a01b03808416600090815260ce602090815260408083209386168352929052206001015415155b90505b92915050565b6001600160a01b03828116600081815260ce6020908152604080832094861680845294825280832093835260cc8252808320948352938152838220845160608101865281548152600182015492810192909252600201549381019390935290919042905082600101548111156109115781511580611f6b5750808260200151115b80611f7d575081604001518360010154115b15611f8e5760018301819055610911565b6000611fa284600101548460200151612c8d565b90506000611fb4838560400151612ca4565b90506000611fc28383613609565b8551909150600090611fd490836135ea565b90506000886001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561201157600080fd5b505afa158015612025573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204991906133f9565b9050600080821161205b576000612078565b8161206e84670de0b6b3a76400006135ea565b61207891906135ca565b90506000818a6000015461208c91906135b2565b60408051808201825291825260208083019a8b526001600160a01b039e8f16600090815260ce82528281209e909f168f529c909c529a909b2099518a555050935160019097019690965550505050505050565b42808210156121565760405162461bcd60e51b815260206004820152603c60248201527f74686520656e642074696d657374616d70206d7573742062652067726561746560448201527f72207468616e207468652063757272656e742074696d657374616d700000000060648201526084016107bd565b828210156121cc5760405162461bcd60e51b815260206004820152603a60248201527f74686520656e642074696d657374616d70206d7573742062652067726561746560448201527f72207468616e207468652073746172742074696d657374616d7000000000000060648201526084016107bd565b8360400151811080156121e25750836020015181115b80156121f15750602084015115155b1561226f578284602001511461226f5760405162461bcd60e51b815260206004820152603960248201527f63616e6e6f74206368616e6765207468652073746172742074696d657374616d60448201527f702061667465722074686520726577617264207374617274730000000000000060648201526084016107bd565b50505050565b6001600160a01b03808316600090815260cf6020908152604080832093851683529290529081205415801590611ee15750506001600160a01b03918216600090815260cf60209081526040808320939094168252919091522060010154151590565b6001600160a01b03838116600081815260cf6020908152604080832094871680845294825280832093835260cd82528083209483529381528382208451606081018652815481526001820154928101929092526002015493810193909352909190429050826001015481111561108657815115806123585750816020015181105b8061236a575081604001518360010154115b1561237b5760018301819055611086565b600061238f84600101548460200151612c8d565b905060006123a1838560400151612ca4565b905060006123af8383613609565b85519091506000906123c190836135ea565b90506000888a6001600160a01b03166347bd37186040518163ffffffff1660e01b815260040160206040518083038186803b1580156123ff57600080fd5b505afa158015612413573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061243791906133f9565b61244990670de0b6b3a76400006135ea565b61245391906135ca565b90506000808211612465576000612482565b8161247884670de0b6b3a76400006135ea565b61248291906135ca565b90506000818a6000015461249691906135b2565b905060405180604001604052808281526020018981525060cf60008f6001600160a01b03166001600160a01b0316815260200190815260200160002060008e6001600160a01b03166001600160a01b03168152602001908152602001600020600082015181600001556020820151816001015590505050505050505050505050505050565b803b61257f5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016107bd565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b61261f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016107bd565b600080846001600160a01b03168460405161263a919061343e565b600060405180830381855af49150503d8060008114612675576040519150601f19603f3d011682016040523d82523d6000602084013e61267a565b606091505b50915091506126a282826040518060600160405280602781526020016136b760279139612cb5565b95945050505050565b600054610100900460ff16806126c4575060005460ff16155b6126e05760405162461bcd60e51b81526004016107bd906134da565b600054610100900460ff16158015611996576000805460ff1961ff001990911661010017166001179055801561093c576000805461ff001916905550565b600054610100900460ff1680612737575060005460ff16155b6127535760405162461bcd60e51b81526004016107bd906134da565b600054610100900460ff1615801561277e576000805460ff1961ff0019909116610100171660011790555b609780546001600160a01b0319163390811790915560405181906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350801561093c576000805461ff001916905550565b6001600160a01b03848116600081815260ce602090815260408083208886168085529083528184208251808401845281548082526001909201548186015295855260d08452828520918552908352818420958816845294909152902080549083905590919080156129ef57600061284c8284613609565b6040516370a0823160e01b81526001600160a01b0388811660048301529192506000918916906370a082319060240160206040518083038186803b15801561289357600080fd5b505afa1580156128a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128cb91906133f9565b90506000670de0b6b3a76400006128e284846135ea565b6128ec91906135ca565b6001600160a01b03808c16600090815260d260209081526040808320938d16835292905290812054919250906129239083906135b2565b90508715612961576129368b8a83611cd7565b6001600160a01b03808d16600090815260d260209081526040808320938e168352929052205561298a565b6001600160a01b03808c16600090815260d260209081526040808320938d168352929052208190555b886001600160a01b03168a6001600160a01b03168c6001600160a01b03167fd86006b66121ffb8dbb982b137b8f7e9d7db643a9b18044e879f6214b709d31e858a6040516129e2929190918252602082015260400190565b60405180910390a4505050505b50505050505050565b6001600160a01b03858116600081815260cf602090815260408083208986168085529083528184208251808401845281548082526001909201548186015295855260d1845282852091855290835281842095891684529490915290208054908390559091908015612c31576000612a6f8284613609565b6040516395dd919360e01b81526001600160a01b0389811660048301529192506000918891908b16906395dd91939060240160206040518083038186803b158015612ab957600080fd5b505afa158015612acd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612af191906133f9565b612b0390670de0b6b3a76400006135ea565b612b0d91906135ca565b90506000670de0b6b3a7640000612b2484846135ea565b612b2e91906135ca565b6001600160a01b03808d16600090815260d260209081526040808320938e1683529290529081205491925090612b659083906135b2565b90508715612ba357612b788c8b83611cd7565b6001600160a01b03808e16600090815260d260209081526040808320938f1683529290522055612bcc565b6001600160a01b03808d16600090815260d260209081526040808320938e168352929052208190555b896001600160a01b03168b6001600160a01b03168d6001600160a01b03167f6b024d318c21b2bab46c7033be8aea76966d078464fbfe800d89c0f74539bcc9858a604051612c24929190918252602082015260400190565b60405180910390a4505050505b5050505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526109dd908490612cee565b600081831115612c9e575081611ee4565b50919050565b600081831015612c9e575081611ee4565b60608315612cc4575081611e7d565b825115612cd45782518084602001fd5b8160405162461bcd60e51b81526004016107bd91906134a7565b6000612d43826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612dc09092919063ffffffff16565b8051909150156109dd5780806020019051810190612d61919061338f565b6109dd5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016107bd565b6060612dcf8484600085612dd7565b949350505050565b606082471015612e385760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016107bd565b843b612e865760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107bd565b600080866001600160a01b03168587604051612ea2919061343e565b60006040518083038185875af1925050503d8060008114612edf576040519150601f19603f3d011682016040523d82523d6000602084013e612ee4565b606091505b5091509150612ef4828286612cb5565b979650505050505050565b600082601f830112612f0f578081fd5b81356020612f24612f1f8361358e565b61355d565b8281528181019085830183850287018401881015612f40578586fd5b855b85811015612f67578135612f5581613693565b84529284019290840190600101612f42565b5090979650505050505050565b600082601f830112612f84578081fd5b81356020612f94612f1f8361358e565b8281528181019085830183850287018401881015612fb0578586fd5b855b85811015612f6757813584529284019290840190600101612fb2565b600060208284031215612fdf578081fd5b8135611e7d81613693565b60008060408385031215612ffc578081fd5b823561300781613693565b9150602083013561301781613693565b809150509250929050565b600080600060608486031215613036578081fd5b833561304181613693565b9250602084013561305181613693565b9150604084013561306181613693565b809150509250925092565b6000806040838503121561307e578182fd5b823561308981613693565b9150602083013567ffffffffffffffff8111156130a4578182fd5b6130b085828601612eff565b9150509250929050565b600080600080600060a086880312156130d1578081fd5b85356130dc81613693565b9450602086013567ffffffffffffffff808211156130f8578283fd5b61310489838a01612eff565b95506040880135915080821115613119578283fd5b61312589838a01612f74565b9450606088013591508082111561313a578283fd5b61314689838a01612f74565b9350608088013591508082111561315b578283fd5b5061316888828901612f74565b9150509295509295909350565b60008060408385031215613187578182fd5b823561319281613693565b915060208381013567ffffffffffffffff808211156131af578384fd5b818601915086601f8301126131c2578384fd5b8135818111156131d4576131d461367d565b6131e6601f8201601f1916850161355d565b915080825287848285010111156131fb578485fd5b8084840185840137810190920192909252919491935090915050565b600060208284031215613228578081fd5b813567ffffffffffffffff81111561323e578182fd5b612dcf84828501612eff565b6000602080838503121561325c578182fd5b825167ffffffffffffffff811115613272578283fd5b8301601f81018513613282578283fd5b8051613290612f1f8261358e565b81815283810190838501858402850186018910156132ac578687fd5b8694505b838510156132d75780516132c381613693565b8352600194909401939185019185016132b0565b50979650505050505050565b600080600080600060a086880312156132fa578283fd5b853567ffffffffffffffff80821115613311578485fd5b61331d89838a01612eff565b96506020880135915080821115613332578485fd5b61333e89838a01612eff565b95506040880135915080821115613353578485fd5b5061336088828901612eff565b9350506060860135613371816136a8565b91506080860135613381816136a8565b809150509295509295909350565b6000602082840312156133a0578081fd5b8151611e7d816136a8565b6000806000606084860312156133bf578081fd5b83516133ca816136a8565b602085015160409095015190969495509392505050565b6000602082840312156133f2578081fd5b5035919050565b60006020828403121561340a578081fd5b5051919050565b600080600060608486031215613425578081fd5b8351925060208401519150604084015190509250925092565b60008251613450818460208701613620565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b8181101561349b5783516001600160a01b031683529284019291840191600101613476565b50909695505050505050565b60006020825282518060208401526134c6816040850160208701613620565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b604051601f8201601f1916810167ffffffffffffffff811182821017156135865761358661367d565b604052919050565b600067ffffffffffffffff8211156135a8576135a861367d565b5060209081020190565b600082198211156135c5576135c5613667565b500190565b6000826135e557634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561360457613604613667565b500290565b60008282101561361b5761361b613667565b500390565b60005b8381101561363b578181015183820152602001613623565b8381111561226f5750506000910152565b600060001982141561366057613660613667565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461093c57600080fd5b801515811461093c57600080fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212209b79eb32f1fcbf50c5707a5224b1417f84ad722b4cb8bd1f8a551c487023508c64736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_addRewardToken(address)": {
        "params": {
          "rewardToken": "The new reward token"
        }
      },
      "_setRewardBorrowSpeeds(address,address[],uint256[],uint256[],uint256[])": {
        "params": {
          "cTokens": "The addresses of cTokens",
          "ends": "The list of end timestamps",
          "rewardToken": "The reward token",
          "speeds": "The list of reward speeds",
          "starts": "The list of start timestamps"
        }
      },
      "_setRewardSupplySpeeds(address,address[],uint256[],uint256[],uint256[])": {
        "params": {
          "cTokens": "The addresses of cTokens",
          "ends": "The list of end timestamps",
          "rewardToken": "The reward token",
          "speeds": "The list of reward speeds",
          "starts": "The list of start timestamps"
        }
      },
      "claimAllRewards(address)": {
        "params": {
          "holder": "The address to claim rewards for"
        }
      },
      "claimRewards(address[],address[],address[],bool,bool)": {
        "params": {
          "borrowers": "Whether or not to claim rewards earned by borrowing",
          "cTokens": "The list of markets to claim rewards in",
          "holders": "The addresses to claim rewards for",
          "rewards": "The list of reward tokens to claim",
          "suppliers": "Whether or not to claim rewards earned by supplying"
        }
      },
      "getBlockTimestamp()": {
        "returns": {
          "_0": "The current block timestamp"
        }
      },
      "getRewardTokenList()": {
        "returns": {
          "_0": "The list of reward token addresses"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateBorrowIndex(address,address[])": {
        "params": {
          "borrowers": "The related borrowers",
          "cToken": "The market whose borrow index to update"
        }
      },
      "updateDebtors(address[])": {
        "params": {
          "accounts": "The list of accounts to be updated"
        }
      },
      "updateSupplyIndex(address,address[])": {
        "params": {
          "cToken": "The market whose supply index to update",
          "suppliers": "The related suppliers"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "TransferReward(address,address,uint256)": {
        "notice": "Emitted when rewards are transferred to a user"
      },
      "UpdateBorrowRewardSpeed(address,address,uint256,uint256,uint256)": {
        "notice": "Emitted when a market's reward borrow speed is updated"
      },
      "UpdateBorrowerRewardIndex(address,address,address,uint256,uint256)": {
        "notice": "Emitted when a borrower's reward borrower index is updated"
      },
      "UpdateDebtor(address,bool)": {
        "notice": "Emitted when a debtor is updated"
      },
      "UpdateSupplierRewardIndex(address,address,address,uint256,uint256)": {
        "notice": "Emitted when a supplier's reward supply index is updated"
      },
      "UpdateSupplyRewardSpeed(address,address,uint256,uint256,uint256)": {
        "notice": "Emitted when a market's reward supply speed is updated"
      }
    },
    "kind": "user",
    "methods": {
      "_addRewardToken(address)": {
        "notice": "Add new reward token. Revert if the reward token has been added"
      },
      "_setRewardBorrowSpeeds(address,address[],uint256[],uint256[],uint256[])": {
        "notice": "Set cTokens reward borrow speeds"
      },
      "_setRewardSupplySpeeds(address,address[],uint256[],uint256[],uint256[])": {
        "notice": "Set cTokens reward supply speeds"
      },
      "claimAllRewards(address)": {
        "notice": "Claim all the rewards accrued by holder in all markets"
      },
      "claimRewards(address[],address[],address[],bool,bool)": {
        "notice": "Claim the rewards accrued by the holders"
      },
      "comptroller()": {
        "notice": "The comptroller that wants to distribute rewards."
      },
      "debtors(address)": {
        "notice": "The debtors who can't claim rewards until their bad debts are repaid."
      },
      "getBlockTimestamp()": {
        "notice": "Return the current block timestamp."
      },
      "getRewardTokenList()": {
        "notice": "Return the reward token list."
      },
      "initialize(address,address)": {
        "notice": "Initialize the contract with admin and comptroller"
      },
      "rewardAccrued(address,address)": {
        "notice": "The reward accrued but not yet transferred to each user"
      },
      "rewardBorrowSpeeds(address,address)": {
        "notice": "The reward speeds of each reward token for every borrow market"
      },
      "rewardBorrowState(address,address)": {
        "notice": "The market reward borrow state for each market"
      },
      "rewardBorrowerIndex(address,address,address)": {
        "notice": "The borrow index for each market for each borrower as of the last time they accrued rewards"
      },
      "rewardSupplierIndex(address,address,address)": {
        "notice": "The supply index for each market for each supplier as of the last time they accrued rewards"
      },
      "rewardSupplySpeeds(address,address)": {
        "notice": "The reward speeds of each reward token for every supply market"
      },
      "rewardSupplyState(address,address)": {
        "notice": "The market reward supply state for each market"
      },
      "rewardTokens(uint256)": {
        "notice": "The support reward tokens."
      },
      "rewardTokensMap(address)": {
        "notice": "The support reward tokens."
      },
      "updateBorrowIndex(address,address[])": {
        "notice": "Accrue rewards to the market by updating the borrow index and calculate rewards accrued by borrowers"
      },
      "updateDebtors(address[])": {
        "notice": "Update accounts to be debtors or not. Debtors couldn't claim rewards until their bad debts are repaid."
      },
      "updateSupplyIndex(address,address[])": {
        "notice": "Accrue rewards to the market by updating the supply index and calculate rewards accrued by suppliers"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 580,
        "contract": "contracts/LiquidityMining.sol:LiquidityMining",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 583,
        "contract": "contracts/LiquidityMining.sol:LiquidityMining",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 563,
        "contract": "contracts/LiquidityMining.sol:LiquidityMining",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 693,
        "contract": "contracts/LiquidityMining.sol:LiquidityMining",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 982,
        "contract": "contracts/LiquidityMining.sol:LiquidityMining",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/LiquidityMining.sol:LiquidityMining",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 129,
        "contract": "contracts/LiquidityMining.sol:LiquidityMining",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4793,
        "contract": "contracts/LiquidityMining.sol:LiquidityMining",
        "label": "comptroller",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 4797,
        "contract": "contracts/LiquidityMining.sol:LiquidityMining",
        "label": "rewardTokens",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4802,
        "contract": "contracts/LiquidityMining.sol:LiquidityMining",
        "label": "rewardTokensMap",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4817,
        "contract": "contracts/LiquidityMining.sol:LiquidityMining",
        "label": "rewardSupplySpeeds",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(RewardSpeed)4809_storage))"
      },
      {
        "astId": 4825,
        "contract": "contracts/LiquidityMining.sol:LiquidityMining",
        "label": "rewardBorrowSpeeds",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(RewardSpeed)4809_storage))"
      },
      {
        "astId": 4838,
        "contract": "contracts/LiquidityMining.sol:LiquidityMining",
        "label": "rewardSupplyState",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(RewardState)4830_storage))"
      },
      {
        "astId": 4846,
        "contract": "contracts/LiquidityMining.sol:LiquidityMining",
        "label": "rewardBorrowState",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(RewardState)4830_storage))"
      },
      {
        "astId": 4855,
        "contract": "contracts/LiquidityMining.sol:LiquidityMining",
        "label": "rewardSupplierIndex",
        "offset": 0,
        "slot": "208",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 4864,
        "contract": "contracts/LiquidityMining.sol:LiquidityMining",
        "label": "rewardBorrowerIndex",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 4871,
        "contract": "contracts/LiquidityMining.sol:LiquidityMining",
        "label": "rewardAccrued",
        "offset": 0,
        "slot": "210",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4876,
        "contract": "contracts/LiquidityMining.sol:LiquidityMining",
        "label": "debtors",
        "offset": 0,
        "slot": "211",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(RewardSpeed)4809_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct LiquidityMiningStorage.RewardSpeed))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(RewardSpeed)4809_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(RewardState)4830_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct LiquidityMiningStorage.RewardState))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(RewardState)4830_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(RewardSpeed)4809_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LiquidityMiningStorage.RewardSpeed)",
        "numberOfBytes": "32",
        "value": "t_struct(RewardSpeed)4809_storage"
      },
      "t_mapping(t_address,t_struct(RewardState)4830_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LiquidityMiningStorage.RewardState)",
        "numberOfBytes": "32",
        "value": "t_struct(RewardState)4830_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RewardSpeed)4809_storage": {
        "encoding": "inplace",
        "label": "struct LiquidityMiningStorage.RewardSpeed",
        "members": [
          {
            "astId": 4804,
            "contract": "contracts/LiquidityMining.sol:LiquidityMining",
            "label": "speed",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4806,
            "contract": "contracts/LiquidityMining.sol:LiquidityMining",
            "label": "start",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4808,
            "contract": "contracts/LiquidityMining.sol:LiquidityMining",
            "label": "end",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RewardState)4830_storage": {
        "encoding": "inplace",
        "label": "struct LiquidityMiningStorage.RewardState",
        "members": [
          {
            "astId": 4827,
            "contract": "contracts/LiquidityMining.sol:LiquidityMining",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4829,
            "contract": "contracts/LiquidityMining.sol:LiquidityMining",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}