{
  "address": "0xBe33aD085e4a5559e964FA8790ceB83905062065",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract LiquidityMining",
          "name": "_liquidityMining",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "cTokens",
          "type": "address[]"
        }
      ],
      "name": "getAllMarketRewardSpeeds",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "cToken",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "rewardTokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "string",
                      "name": "rewardTokenSymbol",
                      "type": "string"
                    },
                    {
                      "internalType": "uint8",
                      "name": "rewardTokenDecimals",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct LiquidityMiningLens.RewardTokenInfo",
                  "name": "rewardToken",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "speed",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "start",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "end",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LiquidityMiningLens.RewardSpeed",
                  "name": "supplySpeed",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "speed",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "start",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "end",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LiquidityMiningLens.RewardSpeed",
                  "name": "borrowSpeed",
                  "type": "tuple"
                }
              ],
              "internalType": "struct LiquidityMiningLens.RewardSpeedInfo[]",
              "name": "rewardSpeeds",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct LiquidityMiningLens.MarketRewardSpeed[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "getMarketRewardSpeeds",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "cToken",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "rewardTokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "string",
                      "name": "rewardTokenSymbol",
                      "type": "string"
                    },
                    {
                      "internalType": "uint8",
                      "name": "rewardTokenDecimals",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct LiquidityMiningLens.RewardTokenInfo",
                  "name": "rewardToken",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "speed",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "start",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "end",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LiquidityMiningLens.RewardSpeed",
                  "name": "supplySpeed",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "speed",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "start",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "end",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LiquidityMiningLens.RewardSpeed",
                  "name": "borrowSpeed",
                  "type": "tuple"
                }
              ],
              "internalType": "struct LiquidityMiningLens.RewardSpeedInfo[]",
              "name": "rewardSpeeds",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct LiquidityMiningLens.MarketRewardSpeed",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "getRewardTokenInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "rewardTokenAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "rewardTokenSymbol",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "rewardTokenDecimals",
              "type": "uint8"
            }
          ],
          "internalType": "struct LiquidityMiningLens.RewardTokenInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getRewardsAvailable",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "rewardTokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "rewardTokenSymbol",
                  "type": "string"
                },
                {
                  "internalType": "uint8",
                  "name": "rewardTokenDecimals",
                  "type": "uint8"
                }
              ],
              "internalType": "struct LiquidityMiningLens.RewardTokenInfo",
              "name": "rewardToken",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct LiquidityMiningLens.RewardAvailable[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityMining",
      "outputs": [
        {
          "internalType": "contract LiquidityMining",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb15c4036eb029a1bcbb01d7a163d35b60bc36202324e691403cde06c502eefa5",
  "receipt": {
    "to": null,
    "from": "0x1BA608D6a354fbEb41FD7cC799e7f09b2612AB26",
    "contractAddress": "0xBe33aD085e4a5559e964FA8790ceB83905062065",
    "transactionIndex": 61,
    "gasUsed": "1124377",
    "logsBloom": "0x
    "blockHash": "0x5d731ecdf7cba03639559dacb47db08ef4560637e8024fdf713b638e2b25668e",
    "transactionHash": "0xb15c4036eb029a1bcbb01d7a163d35b60bc36202324e691403cde06c502eefa5",
    "logs": [],
    "blockNumber": 14607506,
    "cumulativeGasUsed": "6612234",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xEFCF8AE4ee301607f6188Eb2A301e201795C9885"
  ],
  "numDeployments": 1,
  "solcInputHash": "d1312082e23a94c9e06e25fcdbccf791",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract LiquidityMining\",\"name\":\"_liquidityMining\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"cTokens\",\"type\":\"address[]\"}],\"name\":\"getAllMarketRewardSpeeds\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"rewardTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"rewardTokenDecimals\",\"type\":\"uint8\"}],\"internalType\":\"struct LiquidityMiningLens.RewardTokenInfo\",\"name\":\"rewardToken\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"speed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"internalType\":\"struct LiquidityMiningLens.RewardSpeed\",\"name\":\"supplySpeed\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"speed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"internalType\":\"struct LiquidityMiningLens.RewardSpeed\",\"name\":\"borrowSpeed\",\"type\":\"tuple\"}],\"internalType\":\"struct LiquidityMiningLens.RewardSpeedInfo[]\",\"name\":\"rewardSpeeds\",\"type\":\"tuple[]\"}],\"internalType\":\"struct LiquidityMiningLens.MarketRewardSpeed[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getMarketRewardSpeeds\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"rewardTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"rewardTokenDecimals\",\"type\":\"uint8\"}],\"internalType\":\"struct LiquidityMiningLens.RewardTokenInfo\",\"name\":\"rewardToken\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"speed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"internalType\":\"struct LiquidityMiningLens.RewardSpeed\",\"name\":\"supplySpeed\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"speed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"internalType\":\"struct LiquidityMiningLens.RewardSpeed\",\"name\":\"borrowSpeed\",\"type\":\"tuple\"}],\"internalType\":\"struct LiquidityMiningLens.RewardSpeedInfo[]\",\"name\":\"rewardSpeeds\",\"type\":\"tuple[]\"}],\"internalType\":\"struct LiquidityMiningLens.MarketRewardSpeed\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"getRewardTokenInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"rewardTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"rewardTokenDecimals\",\"type\":\"uint8\"}],\"internalType\":\"struct LiquidityMiningLens.RewardTokenInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRewardsAvailable\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"rewardTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"rewardTokenDecimals\",\"type\":\"uint8\"}],\"internalType\":\"struct LiquidityMiningLens.RewardTokenInfo\",\"name\":\"rewardToken\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct LiquidityMiningLens.RewardAvailable[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityMining\",\"outputs\":[{\"internalType\":\"contract LiquidityMining\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAllMarketRewardSpeeds(address[])\":{\"params\":{\"cTokens\":\"The market addresses\"},\"returns\":{\"_0\":\"The list of reward speed info\"}},\"getMarketRewardSpeeds(address)\":{\"params\":{\"cToken\":\"The market address\"},\"returns\":{\"_0\":\"The market reward speed info\"}},\"getRewardTokenInfo(address)\":{\"params\":{\"rewardToken\":\"The reward token address\"},\"returns\":{\"_0\":\"The reward token info\"}},\"getRewardsAvailable(address)\":{\"details\":\"This function is normally used by staticcall.\",\"params\":{\"account\":\"The user address\"},\"returns\":{\"_0\":\"The list of user available rewards\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAllMarketRewardSpeeds(address[])\":{\"notice\":\"Get all market reward speed info.\"},\"getMarketRewardSpeeds(address)\":{\"notice\":\"Get reward speed info by market.\"},\"getRewardTokenInfo(address)\":{\"notice\":\"Get reward token info.\"},\"getRewardsAvailable(address)\":{\"notice\":\"Get user all available rewards.\"}},\"notice\":\"LiquidityMiningLens This contract is mostly used by front-end to get LM contract information.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LiquidityMiningLens.sol\":\"LiquidityMiningLens\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc68cad93ce702131a09334e8705d4af062278defa99627a2c94685fb96ff8cc4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal initializer {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(address newImplementation, bytes memory data, bool forceCall) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\n                    \\\"upgradeTo(address)\\\",\\n                    oldImplementation\\n                )\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _setImplementation(newImplementation);\\n            emit Upgraded(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(\\n            AddressUpgradeable.isContract(newBeacon),\\n            \\\"ERC1967: new beacon is not a contract\\\"\\n        );\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /*\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xda94a85ba0a26d49cd327cc63b8b54fa5dde8f5d1c5f3c942237096ef896eff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xce27d2053e9b7a970532947213c84eed0289ada2d9a91c92b7e1e15f3a466c54\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Base contract for building openzeppelin-upgrades compatible implementations for the {ERC1967Proxy}. It includes\\n * publicly available upgrade functions that are called by the plugin and by the secure upgrade mechanism to verify\\n * continuation of the upgradability.\\n *\\n * The {_authorizeUpgrade} function MUST be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal initializer {\\n    }\\n    function upgradeTo(address newImplementation) external virtual {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6014667ab9e057c1810fcb7ef844123c581a34eb8dafc1aaa15f4e0f704620b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5642ae1d6b33c5c0b71a8412c6c64cbcf2468b84a002bee3e33cdb5644d25cdb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8e9eb503de1189f50c5f16fef327da310b11898d6b9ab3ca937df07c35233b9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc15eeb888d421aa4dedf46768a0502590d88911cfe5750d3ab9f644a7e5ada95\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"contracts/LiquidityMining.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"./LiquidityMiningStorage.sol\\\";\\nimport \\\"./interfaces/ComptrollerInterface.sol\\\";\\nimport \\\"./interfaces/CTokenInterface.sol\\\";\\nimport \\\"./interfaces/LiquidityMiningInterface.sol\\\";\\n\\ncontract LiquidityMining is Initializable, UUPSUpgradeable, OwnableUpgradeable, LiquidityMiningStorage, LiquidityMiningInterface {\\n    using SafeERC20 for IERC20;\\n\\n    uint internal constant initialIndex = 1e18;\\n    address public constant ethAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /**\\n     * @notice Emitted when a supplier's reward supply index is updated\\n     */\\n    event UpdateSupplierRewardIndex(\\n        address indexed rewardToken,\\n        address indexed cToken,\\n        address indexed supplier,\\n        uint rewards,\\n        uint supplyIndex\\n    );\\n\\n    /**\\n     * @notice Emitted when a borrower's reward borrower index is updated\\n     */\\n    event UpdateBorrowerRewardIndex(\\n        address indexed rewardToken,\\n        address indexed cToken,\\n        address indexed borrower,\\n        uint rewards,\\n        uint borrowIndex\\n    );\\n\\n    /**\\n     * @notice Emitted when a market's reward supply speed is updated\\n     */\\n    event UpdateSupplyRewardSpeed(\\n        address indexed rewardToken,\\n        address indexed cToken,\\n        uint indexed speed,\\n        uint start,\\n        uint end\\n    );\\n\\n    /**\\n     * @notice Emitted when a market's reward borrow speed is updated\\n     */\\n    event UpdateBorrowRewardSpeed(\\n        address indexed rewardToken,\\n        address indexed cToken,\\n        uint indexed speed,\\n        uint start,\\n        uint end\\n    );\\n\\n    /**\\n     * @notice Emitted when rewards are transferred to a user\\n     */\\n    event TransferReward(\\n        address indexed rewardToken,\\n        address indexed account,\\n        uint indexed amount\\n    );\\n\\n    /**\\n     * @notice Emitted when a debtor is updated\\n     */\\n    event UpdateDebtor(\\n        address indexed account,\\n        bool indexed isDebtor\\n    );\\n\\n    /**\\n     * @notice Initialize the contract with admin and comptroller\\n     */\\n    function initialize(address _admin, address _comptroller) initializer public {\\n        __Ownable_init();\\n\\n        comptroller = _comptroller;\\n        transferOwnership(_admin);\\n    }\\n\\n    /**\\n     * @notice Contract might receive ETH as one of the LM rewards.\\n     */\\n    receive() external payable {}\\n\\n    /* User functions */\\n\\n    /**\\n     * @notice Accrue rewards to the market by updating the supply index and calculate rewards accrued by suppliers\\n     * @param cToken The market whose supply index to update\\n     * @param suppliers The related suppliers\\n     */\\n    function updateSupplyIndex(address cToken, address[] memory suppliers) external override {\\n        // Distribute the rewards right away.\\n        updateSupplyIndexInternal(rewardTokens, cToken, suppliers, true);\\n    }\\n\\n    /**\\n     * @notice Accrue rewards to the market by updating the borrow index and calculate rewards accrued by borrowers\\n     * @param cToken The market whose borrow index to update\\n     * @param borrowers The related borrowers\\n     */\\n    function updateBorrowIndex(address cToken, address[] memory borrowers) external override {\\n        // Distribute the rewards right away.\\n        updateBorrowIndexInternal(rewardTokens, cToken, borrowers, true);\\n    }\\n\\n    /**\\n     * @notice Return the current block timestamp.\\n     * @return The current block timestamp\\n     */\\n    function getBlockTimestamp() public virtual view returns (uint) {\\n        return block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Return the reward token list.\\n     * @return The list of reward token addresses\\n     */\\n    function getRewardTokenList() external view returns (address[] memory) {\\n        return rewardTokens;\\n    }\\n\\n    /**\\n     * @notice Claim all the rewards accrued by holder in all markets\\n     * @param holder The address to claim rewards for\\n     */\\n    function claimAllRewards(address holder) public {\\n        address[] memory holders = new address[](1);\\n        holders[0] = holder;\\n        address[] memory allMarkets = ComptrollerInterface(comptroller).getAllMarkets();\\n        return claimRewards(holders, allMarkets, rewardTokens, true, true);\\n    }\\n\\n    /**\\n     * @notice Claim the rewards accrued by the holders\\n     * @param holders The addresses to claim rewards for\\n     * @param cTokens The list of markets to claim rewards in\\n     * @param rewards The list of reward tokens to claim\\n     * @param borrowers Whether or not to claim rewards earned by borrowing\\n     * @param suppliers Whether or not to claim rewards earned by supplying\\n     */\\n    function claimRewards(address[] memory holders, address[] memory cTokens, address[] memory rewards, bool borrowers, bool suppliers) public {\\n        for (uint i = 0; i < cTokens.length; i++) {\\n            address cToken = cTokens[i];\\n            (bool isListed, , ) = ComptrollerInterface(comptroller).markets(cToken);\\n            require(isListed, \\\"market must be listed\\\");\\n\\n            // Same reward generated from multiple markets could aggregate and distribute once later for gas consumption.\\n            if (borrowers) {\\n                updateBorrowIndexInternal(rewards, cToken, holders, false);\\n            }\\n            if (suppliers) {\\n                updateSupplyIndexInternal(rewards, cToken, holders, false);\\n            }\\n        }\\n\\n        // Distribute the rewards.\\n        for (uint i = 0; i < rewards.length; i++) {\\n            for (uint j = 0; j < holders.length; j++) {\\n                address rewardToken = rewards[i];\\n                address holder = holders[j];\\n                rewardAccrued[rewardToken][holder] = transferReward(rewardToken, holder, rewardAccrued[rewardToken][holder]);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Update accounts to be debtors or not. Debtors couldn't claim rewards until their bad debts are repaid.\\n     * @param accounts The list of accounts to be updated\\n     */\\n    function updateDebtors(address[] memory accounts) external {\\n        for (uint i = 0; i < accounts.length; i++) {\\n            address account = accounts[i];\\n            (uint err, , uint shortfall) = ComptrollerInterface(comptroller).getAccountLiquidity(account);\\n            require(err == 0, \\\"failed to get account liquidity from comptroller\\\");\\n\\n            if (shortfall > 0 && !debtors[account]) {\\n                debtors[account] = true;\\n                emit UpdateDebtor(account, true);\\n            } else if (shortfall == 0 && debtors[account]) {\\n                debtors[account] = false;\\n                emit UpdateDebtor(account, false);\\n            }\\n        }\\n    }\\n\\n    /* Admin functions */\\n\\n    /**\\n     * @notice Add new reward token. Revert if the reward token has been added\\n     * @param rewardToken The new reward token\\n     */\\n    function _addRewardToken(address rewardToken) external onlyOwner {\\n        require(!rewardTokensMap[rewardToken], \\\"reward token has been added\\\");\\n        rewardTokensMap[rewardToken] = true;\\n        rewardTokens.push(rewardToken);\\n    }\\n\\n    /**\\n     * @notice Set cTokens reward supply speeds\\n     * @param rewardToken The reward token\\n     * @param cTokens The addresses of cTokens\\n     * @param speeds The list of reward speeds\\n     * @param starts The list of start timestamps\\n     * @param ends The list of end timestamps\\n     */\\n    function _setRewardSupplySpeeds(address rewardToken, address[] memory cTokens, uint[] memory speeds, uint[] memory starts, uint[] memory ends) external onlyOwner {\\n        _setRewardSpeeds(rewardToken, cTokens, speeds, starts, ends, true);\\n    }\\n\\n    /**\\n     * @notice Set cTokens reward borrow speeds\\n     * @param rewardToken The reward token\\n     * @param cTokens The addresses of cTokens\\n     * @param speeds The list of reward speeds\\n     * @param starts The list of start timestamps\\n     * @param ends The list of end timestamps\\n     */\\n    function _setRewardBorrowSpeeds(address rewardToken, address[] memory cTokens, uint[] memory speeds, uint[] memory starts, uint[] memory ends) external onlyOwner {\\n        _setRewardSpeeds(rewardToken, cTokens, speeds, starts, ends, false);\\n    }\\n\\n    /* Internal functions */\\n\\n    /**\\n     * @dev _authorizeUpgrade is used by UUPSUpgradeable to determine if it's allowed to upgrade a proxy implementation.\\n     * @param newImplementation The new implementation\\n     *\\n     * Ref: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/utils/UUPSUpgradeable.sol\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n    /**\\n     * @notice Given the reward token list, accrue rewards to the market by updating the supply index and calculate rewards accrued by suppliers\\n     * @param rewards The list of rewards to update\\n     * @param cToken The market whose supply index to update\\n     * @param suppliers The related suppliers\\n     * @param distribute Distribute the reward or not\\n     */\\n    function updateSupplyIndexInternal(address[] memory rewards, address cToken, address[] memory suppliers, bool distribute) internal {\\n        for (uint i = 0; i < rewards.length; i++) {\\n            require(rewardTokensMap[rewards[i]], \\\"reward token not support\\\");\\n            updateGlobalSupplyIndex(rewards[i], cToken);\\n            for (uint j = 0; j < suppliers.length; j++) {\\n                updateUserSupplyIndex(rewards[i], cToken, suppliers[j], distribute);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Given the reward token list, accrue rewards to the market by updating the borrow index and calculate rewards accrued by borrowers\\n     * @param rewards The list of rewards to update\\n     * @param cToken The market whose borrow index to update\\n     * @param borrowers The related borrowers\\n     * @param distribute Distribute the reward or not\\n     */\\n    function updateBorrowIndexInternal(address[] memory rewards, address cToken, address[] memory borrowers, bool distribute) internal {\\n        for (uint i = 0; i < rewards.length; i++) {\\n            require(rewardTokensMap[rewards[i]], \\\"reward token not support\\\");\\n\\n            uint marketBorrowIndex = CTokenInterface(cToken).borrowIndex();\\n            updateGlobalBorrowIndex(rewards[i], cToken, marketBorrowIndex);\\n            for (uint j = 0; j < borrowers.length; j++) {\\n                updateUserBorrowIndex(rewards[i], cToken, borrowers[j], marketBorrowIndex, distribute);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Accrue rewards to the market by updating the supply index\\n     * @param rewardToken The reward token\\n     * @param cToken The market whose supply index to update\\n     */\\n    function updateGlobalSupplyIndex(address rewardToken, address cToken) internal {\\n        RewardState storage supplyState = rewardSupplyState[rewardToken][cToken];\\n        RewardSpeed memory supplySpeed = rewardSupplySpeeds[rewardToken][cToken];\\n        uint timestamp = getBlockTimestamp();\\n        if (timestamp > supplyState.timestamp) {\\n            if (supplySpeed.speed == 0 || supplySpeed.start > timestamp || supplyState.timestamp > supplySpeed.end) {\\n                // 1. The reward speed is zero,\\n                // 2. The reward hasn't started yet,\\n                // 3. The supply state has handled the end of the reward,\\n                // just update the timestamp.\\n                supplyState.timestamp = timestamp;\\n            } else {\\n                // fromTimestamp is the max of the last update block timestamp and the reward start block timestamp.\\n                uint fromTimestamp = max(supplyState.timestamp, supplySpeed.start);\\n                // toTimestamp is the min of the current block timestamp and the reward end block timestamp.\\n                uint toTimestamp = min(timestamp, supplySpeed.end);\\n                // deltaTime is the time difference used for calculating the rewards.\\n                uint deltaTime = toTimestamp - fromTimestamp;\\n                uint rewardAccrued = deltaTime * supplySpeed.speed;\\n                uint totalSupply = CTokenInterface(cToken).totalSupply();\\n                uint ratio = totalSupply > 0 ? rewardAccrued * 1e18 / totalSupply : 0;\\n                uint index = supplyState.index + ratio;\\n                rewardSupplyState[rewardToken][cToken] = RewardState({\\n                    index: index,\\n                    timestamp: timestamp\\n                });\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Accrue rewards to the market by updating the borrow index\\n     * @param rewardToken The reward token\\n     * @param cToken The market whose borrow index to update\\n     * @param marketBorrowIndex The market borrow index\\n     */\\n    function updateGlobalBorrowIndex(address rewardToken, address cToken, uint marketBorrowIndex) internal {\\n        RewardState storage borrowState = rewardBorrowState[rewardToken][cToken];\\n        RewardSpeed memory borrowSpeed = rewardBorrowSpeeds[rewardToken][cToken];\\n        uint timestamp = getBlockTimestamp();\\n        if (timestamp > borrowState.timestamp) {\\n            if (borrowSpeed.speed == 0 || timestamp < borrowSpeed.start || borrowState.timestamp > borrowSpeed.end) {\\n                // 1. The reward speed is zero,\\n                // 2. The reward hasn't started yet,\\n                // 3. The borrow state has handled the end of the reward,\\n                // just update the timestamp.\\n                borrowState.timestamp = timestamp;\\n            } else {\\n                // fromTimestamp is the max of the last update block timestamp and the reward start block timestamp.\\n                uint fromTimestamp = max(borrowState.timestamp, borrowSpeed.start);\\n                // toTimestamp is the min of the current block timestamp and the reward end block timestamp.\\n                uint toTimestamp = min(timestamp, borrowSpeed.end);\\n                // deltaTime is the time difference used for calculating the rewards.\\n                uint deltaTime = toTimestamp - fromTimestamp;\\n                uint rewardAccrued = deltaTime * borrowSpeed.speed;\\n                uint totalBorrows = CTokenInterface(cToken).totalBorrows() * 1e18 / marketBorrowIndex;\\n                uint ratio = totalBorrows > 0 ? rewardAccrued * 1e18 / totalBorrows : 0;\\n                uint index = borrowState.index + ratio;\\n                rewardBorrowState[rewardToken][cToken] = RewardState({\\n                    index: index,\\n                    timestamp: timestamp\\n                });\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate rewards accrued by a supplier and possibly transfer it to them\\n     * @dev Suppliers will not begin to accrue until after the first interaction with the protocol.\\n     * @param rewardToken The reward token\\n     * @param cToken The market in which the supplier is interacting\\n     * @param supplier The address of the supplier to distribute rewards to\\n     * @param distribute Distribute the reward or not\\n     */\\n    function updateUserSupplyIndex(address rewardToken, address cToken, address supplier, bool distribute) internal {\\n        RewardState memory supplyState = rewardSupplyState[rewardToken][cToken];\\n        uint supplyIndex = supplyState.index;\\n        uint supplierIndex = rewardSupplierIndex[rewardToken][cToken][supplier];\\n        rewardSupplierIndex[rewardToken][cToken][supplier] = supplyIndex;\\n\\n        if (supplierIndex > 0) {\\n            uint deltaIndex = supplyIndex - supplierIndex;\\n            uint supplierTokens = CTokenInterface(cToken).balanceOf(supplier);\\n            uint supplierDelta = supplierTokens * deltaIndex / 1e18;\\n            uint accruedAmount = rewardAccrued[rewardToken][supplier] + supplierDelta;\\n            if (distribute) {\\n                rewardAccrued[rewardToken][supplier] = transferReward(rewardToken, supplier, accruedAmount);\\n            } else {\\n                rewardAccrued[rewardToken][supplier] = accruedAmount;\\n            }\\n            emit UpdateSupplierRewardIndex(rewardToken, cToken, supplier, supplierDelta, supplyIndex);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate rewards accrued by a borrower and possibly transfer it to them\\n     * @dev Borrowers will not begin to accrue until after the first interaction with the protocol.\\n     * @param rewardToken The reward token\\n     * @param cToken The market in which the borrower is interacting\\n     * @param borrower The address of the borrower to distribute rewards to\\n     * @param marketBorrowIndex The market borrow index\\n     * @param distribute Distribute the reward or not\\n     */\\n    function updateUserBorrowIndex(address rewardToken, address cToken, address borrower, uint marketBorrowIndex, bool distribute) internal {\\n        RewardState memory borrowState = rewardBorrowState[rewardToken][cToken];\\n        uint borrowIndex = borrowState.index;\\n        uint borrowerIndex = rewardBorrowerIndex[rewardToken][cToken][borrower];\\n        rewardBorrowerIndex[rewardToken][cToken][borrower] = borrowIndex;\\n\\n        if (borrowerIndex > 0) {\\n            uint deltaIndex = borrowIndex - borrowerIndex;\\n            uint borrowerAmount = CTokenInterface(cToken).borrowBalanceStored(borrower) * 1e18 / marketBorrowIndex;\\n            uint borrowerDelta = borrowerAmount * deltaIndex / 1e18;\\n            uint accruedAmount = rewardAccrued[rewardToken][borrower] + borrowerDelta;\\n            if (distribute) {\\n                rewardAccrued[rewardToken][borrower] = transferReward(rewardToken, borrower, accruedAmount);\\n            } else {\\n                rewardAccrued[rewardToken][borrower] = accruedAmount;\\n            }\\n            emit UpdateBorrowerRewardIndex(rewardToken, cToken, borrower, borrowerDelta, borrowIndex);\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer rewards to the user\\n     * @param rewardToken The reward token\\n     * @param user The address of the user to transfer rewards to\\n     * @param amount The amount of rewards to (possibly) transfer\\n     * @return The amount of rewards which was NOT transferred to the user\\n     */\\n    function transferReward(address rewardToken, address user, uint amount) internal returns (uint) {\\n        uint remain = rewardToken == ethAddress ? address(this).balance : IERC20(rewardToken).balanceOf(address(this));\\n        if (amount > 0 && amount <= remain && !debtors[user]) {\\n            if (rewardToken == ethAddress) {\\n                payable(user).transfer(amount);\\n            } else {\\n                IERC20(rewardToken).safeTransfer(user, amount);\\n            }\\n            emit TransferReward(rewardToken, user, amount);\\n            return 0;\\n        }\\n        return amount;\\n    }\\n\\n    /**\\n     * @notice Set reward speeds\\n     * @param rewardToken The reward token\\n     * @param cTokens The addresses of cTokens\\n     * @param speeds The list of reward speeds\\n     * @param starts The list of start timestamps\\n     * @param ends The list of end timestamp\\n     * @param supply It's supply speed or borrow speed\\n     */\\n    function _setRewardSpeeds(address rewardToken, address[] memory cTokens, uint[] memory speeds, uint[] memory starts, uint[] memory ends, bool supply) internal {\\n        uint timestamp = getBlockTimestamp();\\n        uint numMarkets = cTokens.length;\\n        require(numMarkets != 0 && numMarkets == speeds.length && numMarkets == starts.length && numMarkets == ends.length, \\\"invalid input\\\");\\n        require(rewardTokensMap[rewardToken], \\\"reward token was not added\\\");\\n\\n        for (uint i = 0; i < numMarkets; i++) {\\n            address cToken = cTokens[i];\\n            uint speed = speeds[i];\\n            uint start = starts[i];\\n            uint end = ends[i];\\n            if (supply) {\\n                if (isSupplyRewardStateInit(rewardToken, cToken)) {\\n                    // Update the supply index.\\n                    updateGlobalSupplyIndex(rewardToken, cToken);\\n                } else {\\n                    // Initialize the supply index.\\n                    rewardSupplyState[rewardToken][cToken] = RewardState({\\n                        index: initialIndex,\\n                        timestamp: timestamp\\n                    });\\n                }\\n\\n                validateRewardContent(rewardSupplySpeeds[rewardToken][cToken], start, end);\\n                rewardSupplySpeeds[rewardToken][cToken] = RewardSpeed({\\n                    speed: speed,\\n                    start: start,\\n                    end: end\\n                });\\n                emit UpdateSupplyRewardSpeed(rewardToken, cToken, speed, start, end);\\n            } else {\\n                if (isBorrowRewardStateInit(rewardToken, cToken)) {\\n                    // Update the borrow index.\\n                    uint marketBorrowIndex = CTokenInterface(cToken).borrowIndex();\\n                    updateGlobalBorrowIndex(rewardToken, cToken, marketBorrowIndex);\\n                } else {\\n                    // Initialize the borrow index.\\n                    rewardBorrowState[rewardToken][cToken] = RewardState({\\n                        index: initialIndex,\\n                        timestamp: timestamp\\n                    });\\n                }\\n\\n                validateRewardContent(rewardBorrowSpeeds[rewardToken][cToken], start, end);\\n                rewardBorrowSpeeds[rewardToken][cToken] = RewardSpeed({\\n                    speed: speed,\\n                    start: start,\\n                    end: end\\n                });\\n                emit UpdateBorrowRewardSpeed(rewardToken, cToken, speed, start, end);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to tell if the supply reward state is initialized or not.\\n     * @param rewardToken The reward token\\n     * @param cToken The market\\n     * @return It's initialized or not\\n     */\\n    function isSupplyRewardStateInit(address rewardToken, address cToken) internal view returns (bool) {\\n        return rewardSupplyState[rewardToken][cToken].index != 0 && rewardSupplyState[rewardToken][cToken].timestamp != 0;\\n    }\\n\\n    /**\\n     * @notice Internal function to tell if the borrow reward state is initialized or not.\\n     * @param rewardToken The reward token\\n     * @param cToken The market\\n     * @return It's initialized or not\\n     */\\n    function isBorrowRewardStateInit(address rewardToken, address cToken) internal view returns (bool) {\\n        return rewardBorrowState[rewardToken][cToken].index != 0 && rewardBorrowState[rewardToken][cToken].timestamp != 0;\\n    }\\n\\n    /**\\n     * @notice Internal function to check the new start block timestamp and the end block timestamp.\\n     * @dev This function will revert if any validation failed.\\n     * @param currentSpeed The current reward speed\\n     * @param newStart The new start timestamp\\n     * @param newEnd The new end block timestamp\\n     */\\n    function validateRewardContent(RewardSpeed memory currentSpeed, uint newStart, uint newEnd) internal view {\\n        uint timestamp = getBlockTimestamp();\\n        require(newEnd >= timestamp, \\\"the end timestamp must be greater than the current timestamp\\\");\\n        require(newEnd >= newStart, \\\"the end timestamp must be greater than the start timestamp\\\");\\n        if (timestamp < currentSpeed.end && timestamp > currentSpeed.start && currentSpeed.start != 0) {\\n            require(currentSpeed.start == newStart, \\\"cannot change the start timestamp after the reward starts\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to get the min value of two.\\n     * @param a The first value\\n     * @param b The second value\\n     * @return The min one\\n     */\\n    function min(uint a, uint b) internal pure returns (uint) {\\n        if (a < b) {\\n            return a;\\n        }\\n        return b;\\n    }\\n\\n    /**\\n     * @notice Internal function to get the max value of two.\\n     * @param a The first value\\n     * @param b The second value\\n     * @return The max one\\n     */\\n    function max(uint a, uint b) internal pure returns (uint) {\\n        if (a > b) {\\n            return a;\\n        }\\n        return b;\\n    }\\n}\\n\",\"keccak256\":\"0x34307db2e6dd7a59ecc05a43a81298aba089c98fcb282bf35d128afb6c513ef6\",\"license\":\"MIT\"},\"contracts/LiquidityMiningLens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./LiquidityMining.sol\\\";\\n\\n/**\\n * @notice LiquidityMiningLens\\n * This contract is mostly used by front-end to get LM contract information.\\n */\\ncontract LiquidityMiningLens {\\n    LiquidityMining public liquidityMining;\\n\\n    constructor(LiquidityMining _liquidityMining) {\\n        liquidityMining = _liquidityMining;\\n    }\\n\\n    struct RewardTokenInfo {\\n        address rewardTokenAddress;\\n        string rewardTokenSymbol;\\n        uint8 rewardTokenDecimals;\\n    }\\n\\n    struct RewardAvailable {\\n        RewardTokenInfo rewardToken;\\n        uint amount;\\n    }\\n\\n    /**\\n     * @notice Get user all available rewards.\\n     * @dev This function is normally used by staticcall.\\n     * @param account The user address\\n     * @return The list of user available rewards\\n     */\\n    function getRewardsAvailable(address account) public returns (RewardAvailable[] memory) {\\n        address[] memory rewardTokens = liquidityMining.getRewardTokenList();\\n        uint[] memory beforeBalances = new uint[](rewardTokens.length);\\n        RewardAvailable[] memory rewardAvailables = new RewardAvailable[](rewardTokens.length);\\n\\n        for (uint i = 0; i < rewardTokens.length; i++) {\\n            beforeBalances[i] = IERC20Metadata(rewardTokens[i]).balanceOf(account);\\n        }\\n\\n        liquidityMining.claimAllRewards(account);\\n\\n        for (uint i = 0; i < rewardTokens.length; i++) {\\n            uint newBalance = IERC20Metadata(rewardTokens[i]).balanceOf(account);\\n            rewardAvailables[i] = RewardAvailable({\\n                rewardToken: getRewardTokenInfo(rewardTokens[i]),\\n                amount: newBalance - beforeBalances[i]\\n            });\\n        }\\n        return rewardAvailables;\\n    }\\n\\n    /**\\n     * @notice Get reward token info.\\n     * @param rewardToken The reward token address\\n     * @return The reward token info\\n     */\\n    function getRewardTokenInfo(address rewardToken) public view returns (RewardTokenInfo memory) {\\n        if (rewardToken == liquidityMining.ethAddress()) {\\n            string memory rewardTokenSymbol = \\\"ETH\\\";\\n            if (block.chainid == 56) {\\n                rewardTokenSymbol = \\\"BNB\\\"; // bsc\\n            } else if (block.chainid == 137) {\\n                rewardTokenSymbol = \\\"MATIC\\\"; // polygon\\n            } else if (block.chainid == 250) {\\n                rewardTokenSymbol = \\\"FTM\\\"; // fantom\\n            }\\n            return RewardTokenInfo({\\n                rewardTokenAddress: liquidityMining.ethAddress(),\\n                rewardTokenSymbol: rewardTokenSymbol,\\n                rewardTokenDecimals: uint8(18)\\n            });\\n        } else {\\n            return RewardTokenInfo({\\n                rewardTokenAddress: rewardToken,\\n                rewardTokenSymbol: IERC20Metadata(rewardToken).symbol(),\\n                rewardTokenDecimals: IERC20Metadata(rewardToken).decimals()\\n            });\\n        }\\n    }\\n\\n    struct RewardSpeed {\\n        uint speed;\\n        uint start;\\n        uint end;\\n    }\\n\\n    struct RewardSpeedInfo {\\n        RewardTokenInfo rewardToken;\\n        RewardSpeed supplySpeed;\\n        RewardSpeed borrowSpeed;\\n    }\\n\\n    struct MarketRewardSpeed {\\n        address cToken;\\n        RewardSpeedInfo[] rewardSpeeds;\\n    }\\n\\n    /**\\n     * @notice Get reward speed info by market.\\n     * @param cToken The market address\\n     * @return The market reward speed info\\n     */\\n    function getMarketRewardSpeeds(address cToken) public view returns (MarketRewardSpeed memory) {\\n        address[] memory rewardTokens = liquidityMining.getRewardTokenList();\\n        RewardSpeedInfo[] memory rewardSpeeds = new RewardSpeedInfo[](rewardTokens.length);\\n        for (uint i = 0; i < rewardTokens.length; i++) {\\n            (uint supplySpeed, uint supplyStart, uint supplyEnd) = liquidityMining.rewardSupplySpeeds(rewardTokens[i], cToken);\\n            (uint borrowSpeed, uint borrowStart, uint borrowEnd) = liquidityMining.rewardBorrowSpeeds(rewardTokens[i], cToken);\\n            rewardSpeeds[i] = RewardSpeedInfo({\\n                rewardToken: getRewardTokenInfo(rewardTokens[i]),\\n                supplySpeed: RewardSpeed({\\n                    speed: supplySpeed,\\n                    start: supplyStart,\\n                    end: supplyEnd\\n                }),\\n                borrowSpeed: RewardSpeed({\\n                    speed: borrowSpeed,\\n                    start: borrowStart,\\n                    end: borrowEnd\\n                })\\n            });\\n        }\\n        return MarketRewardSpeed({\\n            cToken: cToken,\\n            rewardSpeeds: rewardSpeeds\\n        });\\n    }\\n\\n    /**\\n     * @notice Get all market reward speed info.\\n     * @param cTokens The market addresses\\n     * @return The list of reward speed info\\n     */\\n    function getAllMarketRewardSpeeds(address[] memory cTokens) public view returns (MarketRewardSpeed[] memory) {\\n        MarketRewardSpeed[] memory allRewardSpeeds = new MarketRewardSpeed[](cTokens.length);\\n        for (uint i = 0; i < cTokens.length; i++) {\\n            allRewardSpeeds[i] = getMarketRewardSpeeds(cTokens[i]);\\n        }\\n        return allRewardSpeeds;\\n    }\\n}\\n\",\"keccak256\":\"0xa665d6878aee83c544fe04fb2df23fea318fa087a151bf34ae67e0bcbbf532f6\",\"license\":\"MIT\"},\"contracts/LiquidityMiningStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ncontract LiquidityMiningStorage {\\n    /// @notice The comptroller that wants to distribute rewards.\\n    address public comptroller;\\n\\n    /// @notice The support reward tokens.\\n    address[] public rewardTokens;\\n\\n    /// @notice The support reward tokens.\\n    mapping(address => bool) public rewardTokensMap;\\n\\n    struct RewardSpeed {\\n        uint speed;\\n        uint start;\\n        uint end;\\n    }\\n\\n    /// @notice The reward speeds of each reward token for every supply market\\n    mapping(address => mapping(address => RewardSpeed)) public rewardSupplySpeeds;\\n\\n    /// @notice The reward speeds of each reward token for every borrow market\\n    mapping(address => mapping(address => RewardSpeed)) public rewardBorrowSpeeds;\\n\\n    struct RewardState {\\n        uint index;\\n        uint timestamp;\\n    }\\n\\n    /// @notice The market reward supply state for each market\\n    mapping(address => mapping(address => RewardState)) public rewardSupplyState;\\n\\n    /// @notice The market reward borrow state for each market\\n    mapping(address => mapping(address => RewardState)) public rewardBorrowState;\\n\\n    /// @notice The supply index for each market for each supplier as of the last time they accrued rewards\\n    mapping(address => mapping(address => mapping(address => uint))) public rewardSupplierIndex;\\n\\n    /// @notice The borrow index for each market for each borrower as of the last time they accrued rewards\\n    mapping(address => mapping(address => mapping(address => uint))) public rewardBorrowerIndex;\\n\\n    /// @notice The reward accrued but not yet transferred to each user\\n    mapping(address => mapping(address => uint)) public rewardAccrued;\\n\\n    /// @notice The debtors who can't claim rewards until their bad debts are repaid.\\n    mapping(address => bool) public debtors;\\n}\\n\",\"keccak256\":\"0xf92f43b05c6308360de837677e72c4b4d76845a746d7113613c00437eee57a1e\",\"license\":\"MIT\"},\"contracts/interfaces/CTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface CTokenInterface {\\n    function balanceOf(address owner) external view returns (uint);\\n    function borrowBalanceStored(address account) external view returns (uint);\\n    function borrowIndex() external view returns (uint);\\n    function totalSupply() external view returns (uint);\\n    function totalBorrows() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x4240ba2b8e528bb568924c02e34badf61fb5139910d8be4ff4a74419ca222e73\",\"license\":\"MIT\"},\"contracts/interfaces/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ComptrollerInterface {\\n    function getAllMarkets() external view returns (address[] memory);\\n    function markets(address) external view returns (bool, uint, uint);\\n    function getAccountLiquidity(address) external view returns (uint, uint, uint);\\n}\\n\",\"keccak256\":\"0x4bf6efa0c95de2e903cd5e4d39432268224c4dc0467c99c5d848d0b658215844\",\"license\":\"MIT\"},\"contracts/interfaces/LiquidityMiningInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @dev LiquidityMiningInterface is for comptroller\\ninterface LiquidityMiningInterface {\\n    function updateSupplyIndex(address cToken, address[] memory accounts) external;\\n    function updateBorrowIndex(address cToken, address[] memory accounts) external;\\n}\\n\",\"keccak256\":\"0xfbbb44207ff40da643a05e6513cd888f3a6e69b9f3c4a98add3176785155c6e2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161138238038061138283398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b6112f1806100916000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80635f15ff421461005c5780637a6856771461008557806385b2d535146100a5578063b2146210146100d0578063b2989f5d146100f0575b600080fd5b61006f61006a366004610d52565b610110565b60405161007c919061119a565b60405180910390f35b610098610093366004610d52565b6104b5565b60405161007c9190611127565b6000546100b8906001600160a01b031681565b6040516001600160a01b03909116815260200161007c565b6100e36100de366004610d91565b6108a9565b60405161007c91906110c7565b6101036100fe366004610d52565b61099f565b60405161007c91906111ad565b60408051808201909152600081526060602082015260008060009054906101000a90046001600160a01b03166001600160a01b031663969133a86040518163ffffffff1660e01b815260040160006040518083038186803b15801561017457600080fd5b505afa158015610188573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101b09190810190610e2f565b90506000815167ffffffffffffffff8111156101dc57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561021557816020015b610202610c9b565b8152602001906001900390816101fa5790505b50905060005b825181101561048c57600080548451829182916001600160a01b0390911690635fd85d2f9088908790811061026057634e487b7160e01b600052603260045260246000fd5b60200260200101518a6040518363ffffffff1660e01b815260040161029b9291906001600160a01b0392831681529116602082015260400190565b60606040518083038186803b1580156102b357600080fd5b505afa1580156102c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102eb9190610f5b565b92509250925060008060008060009054906101000a90046001600160a01b03166001600160a01b0316635f3b28028a898151811061033957634e487b7160e01b600052603260045260246000fd5b60200260200101518d6040518363ffffffff1660e01b81526004016103749291906001600160a01b0392831681529116602082015260400190565b60606040518083038186803b15801561038c57600080fd5b505afa1580156103a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c49190610f5b565b92509250925060405180606001604052806104058b8a815181106103f857634e487b7160e01b600052603260045260246000fd5b602002602001015161099f565b8152602001604051806060016040528089815260200188815260200187815250815260200160405180606001604052808681526020018581526020018481525081525088888151811061046857634e487b7160e01b600052603260045260246000fd5b602002602001018190525050505050505080806104849061125c565b91505061021b565b506040518060400160405280856001600160a01b0316815260200182815250925050505b919050565b60008054604080516312d2267560e31b81529051606093926001600160a01b03169163969133a89160048083019286929190829003018186803b1580156104fb57600080fd5b505afa15801561050f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105379190810190610e2f565b90506000815167ffffffffffffffff81111561056357634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561058c578160200160208202803683370190505b5090506000825167ffffffffffffffff8111156105b957634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156105f257816020015b6105df610d05565b8152602001906001900390816105d75790505b50905060005b83518110156106e35783818151811061062157634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516370a0823160e01b81526001600160a01b038881166004830152909116906370a082319060240160206040518083038186803b15801561066e57600080fd5b505afa158015610682573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a69190610f43565b8382815181106106c657634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806106db8161125c565b9150506105f8565b5060005460405163e991560f60e01b81526001600160a01b0387811660048301529091169063e991560f90602401600060405180830381600087803b15801561072b57600080fd5b505af115801561073f573d6000803e3d6000fd5b5050505060005b83518110156108a057600084828151811061077157634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516370a0823160e01b81526001600160a01b038981166004830152909116906370a082319060240160206040518083038186803b1580156107be57600080fd5b505afa1580156107d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f69190610f43565b905060405180604001604052806108268785815181106103f857634e487b7160e01b600052603260045260246000fd5b815260200185848151811061084b57634e487b7160e01b600052603260045260246000fd5b60200260200101518361085e9190611215565b81525083838151811061088157634e487b7160e01b600052603260045260246000fd5b60200260200101819052505080806108989061125c565b915050610746565b50949350505050565b60606000825167ffffffffffffffff8111156108d557634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561091b57816020015b6040805180820190915260008152606060208201528152602001906001900390816108f35790505b50905060005b83518110156109985761095a84828151811061094d57634e487b7160e01b600052603260045260246000fd5b6020026020010151610110565b82828151811061097a57634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806109909061125c565b915050610921565b5092915050565b6109a7610d25565b60008054906101000a90046001600160a01b03166001600160a01b03166341398b156040518163ffffffff1660e01b815260040160206040518083038186803b1580156109f357600080fd5b505afa158015610a07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2b9190610d75565b6001600160a01b0316826001600160a01b03161415610b8a5760408051808201909152600381526208aa8960eb1b60208201526038461415610a87575060408051808201909152600381526221272160e91b6020820152610ad7565b4660891415610ab257506040805180820190915260058152644d4154494360d81b6020820152610ad7565b4660fa1415610ad7575060408051808201909152600381526246544d60e81b60208201525b604051806060016040528060008054906101000a90046001600160a01b03166001600160a01b03166341398b156040518163ffffffff1660e01b815260040160206040518083038186803b158015610b2e57600080fd5b505afa158015610b42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b669190610d75565b6001600160a01b03168152602001828152602001601260ff168152509150506104b0565b6040518060600160405280836001600160a01b03168152602001836001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610bdd57600080fd5b505afa158015610bf1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c199190810190610ebc565b8152602001836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610c5757600080fd5b505afa158015610c6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8f9190610f88565b60ff16905290506104b0565b6040518060600160405280610cae610d25565b8152602001610cd760405180606001604052806000815260200160008152602001600081525090565b8152602001610d0060405180606001604052806000815260200160008152602001600081525090565b905290565b6040518060400160405280610d18610d25565b8152602001600081525090565b604051806060016040528060006001600160a01b0316815260200160608152602001600060ff1681525090565b600060208284031215610d63578081fd5b8135610d6e816112a3565b9392505050565b600060208284031215610d86578081fd5b8151610d6e816112a3565b60006020808385031215610da3578182fd5b823567ffffffffffffffff811115610db9578283fd5b8301601f81018513610dc9578283fd5b8035610ddc610dd7826111f1565b6111c0565b8181528381019083850185840285018601891015610df8578687fd5b8694505b83851015610e23578035610e0f816112a3565b835260019490940193918501918501610dfc565b50979650505050505050565b60006020808385031215610e41578182fd5b825167ffffffffffffffff811115610e57578283fd5b8301601f81018513610e67578283fd5b8051610e75610dd7826111f1565b8181528381019083850185840285018601891015610e91578687fd5b8694505b83851015610e23578051610ea8816112a3565b835260019490940193918501918501610e95565b600060208284031215610ecd578081fd5b815167ffffffffffffffff80821115610ee4578283fd5b818401915084601f830112610ef7578283fd5b815181811115610f0957610f0961128d565b610f1c601f8201601f19166020016111c0565b9150808252856020828501011115610f32578384fd5b6108a081602084016020860161122c565b600060208284031215610f54578081fd5b5051919050565b600080600060608486031215610f6f578182fd5b8351925060208401519150604084015190509250925092565b600060208284031215610f99578081fd5b815160ff81168114610d6e578182fd5b80516001600160a01b0316825260208082015160408285018190528151818601819052600093919260608284028801810193929183019190880190865b8181101561106657605f198a8703018352835160e0815181895261100c828a0182611074565b91505086820151611033888a01828051825260208082015190830152604090810151910152565b509088015180516080890152602081015160a08901526040015160c0909701969096529284019291840191600101610fe6565b509398975050505050505050565b600060018060a01b03825116835260208201516060602085015280518060608601526110a781608087016020850161122c565b60409384015160ff16938501939093525050601f01601f19160160800190565b6000602080830181845280855180835260408601915060408482028701019250838701855b8281101561111a57603f19888603018452611108858351610fa9565b945092850192908501906001016110ec565b5092979650505050505050565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561118c57888303603f190185528151805187855261116f88860182611074565b91890151948901949094529487019492509086019060010161114b565b509098975050505050505050565b600060208252610d6e6020830184610fa9565b600060208252610d6e6020830184611074565b604051601f8201601f1916810167ffffffffffffffff811182821017156111e9576111e961128d565b604052919050565b600067ffffffffffffffff82111561120b5761120b61128d565b5060209081020190565b60008282101561122757611227611277565b500390565b60005b8381101561124757818101518382015260200161122f565b83811115611256576000848401525b50505050565b600060001982141561127057611270611277565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146112b857600080fd5b5056fea2646970667358221220ef9c9c46e50ba688d5de9a4c4ec5a4919d02e14a2497c4361c918397cf5bb1ad64736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80635f15ff421461005c5780637a6856771461008557806385b2d535146100a5578063b2146210146100d0578063b2989f5d146100f0575b600080fd5b61006f61006a366004610d52565b610110565b60405161007c919061119a565b60405180910390f35b610098610093366004610d52565b6104b5565b60405161007c9190611127565b6000546100b8906001600160a01b031681565b6040516001600160a01b03909116815260200161007c565b6100e36100de366004610d91565b6108a9565b60405161007c91906110c7565b6101036100fe366004610d52565b61099f565b60405161007c91906111ad565b60408051808201909152600081526060602082015260008060009054906101000a90046001600160a01b03166001600160a01b031663969133a86040518163ffffffff1660e01b815260040160006040518083038186803b15801561017457600080fd5b505afa158015610188573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101b09190810190610e2f565b90506000815167ffffffffffffffff8111156101dc57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561021557816020015b610202610c9b565b8152602001906001900390816101fa5790505b50905060005b825181101561048c57600080548451829182916001600160a01b0390911690635fd85d2f9088908790811061026057634e487b7160e01b600052603260045260246000fd5b60200260200101518a6040518363ffffffff1660e01b815260040161029b9291906001600160a01b0392831681529116602082015260400190565b60606040518083038186803b1580156102b357600080fd5b505afa1580156102c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102eb9190610f5b565b92509250925060008060008060009054906101000a90046001600160a01b03166001600160a01b0316635f3b28028a898151811061033957634e487b7160e01b600052603260045260246000fd5b60200260200101518d6040518363ffffffff1660e01b81526004016103749291906001600160a01b0392831681529116602082015260400190565b60606040518083038186803b15801561038c57600080fd5b505afa1580156103a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c49190610f5b565b92509250925060405180606001604052806104058b8a815181106103f857634e487b7160e01b600052603260045260246000fd5b602002602001015161099f565b8152602001604051806060016040528089815260200188815260200187815250815260200160405180606001604052808681526020018581526020018481525081525088888151811061046857634e487b7160e01b600052603260045260246000fd5b602002602001018190525050505050505080806104849061125c565b91505061021b565b506040518060400160405280856001600160a01b0316815260200182815250925050505b919050565b60008054604080516312d2267560e31b81529051606093926001600160a01b03169163969133a89160048083019286929190829003018186803b1580156104fb57600080fd5b505afa15801561050f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105379190810190610e2f565b90506000815167ffffffffffffffff81111561056357634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561058c578160200160208202803683370190505b5090506000825167ffffffffffffffff8111156105b957634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156105f257816020015b6105df610d05565b8152602001906001900390816105d75790505b50905060005b83518110156106e35783818151811061062157634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516370a0823160e01b81526001600160a01b038881166004830152909116906370a082319060240160206040518083038186803b15801561066e57600080fd5b505afa158015610682573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a69190610f43565b8382815181106106c657634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806106db8161125c565b9150506105f8565b5060005460405163e991560f60e01b81526001600160a01b0387811660048301529091169063e991560f90602401600060405180830381600087803b15801561072b57600080fd5b505af115801561073f573d6000803e3d6000fd5b5050505060005b83518110156108a057600084828151811061077157634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516370a0823160e01b81526001600160a01b038981166004830152909116906370a082319060240160206040518083038186803b1580156107be57600080fd5b505afa1580156107d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f69190610f43565b905060405180604001604052806108268785815181106103f857634e487b7160e01b600052603260045260246000fd5b815260200185848151811061084b57634e487b7160e01b600052603260045260246000fd5b60200260200101518361085e9190611215565b81525083838151811061088157634e487b7160e01b600052603260045260246000fd5b60200260200101819052505080806108989061125c565b915050610746565b50949350505050565b60606000825167ffffffffffffffff8111156108d557634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561091b57816020015b6040805180820190915260008152606060208201528152602001906001900390816108f35790505b50905060005b83518110156109985761095a84828151811061094d57634e487b7160e01b600052603260045260246000fd5b6020026020010151610110565b82828151811061097a57634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806109909061125c565b915050610921565b5092915050565b6109a7610d25565b60008054906101000a90046001600160a01b03166001600160a01b03166341398b156040518163ffffffff1660e01b815260040160206040518083038186803b1580156109f357600080fd5b505afa158015610a07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2b9190610d75565b6001600160a01b0316826001600160a01b03161415610b8a5760408051808201909152600381526208aa8960eb1b60208201526038461415610a87575060408051808201909152600381526221272160e91b6020820152610ad7565b4660891415610ab257506040805180820190915260058152644d4154494360d81b6020820152610ad7565b4660fa1415610ad7575060408051808201909152600381526246544d60e81b60208201525b604051806060016040528060008054906101000a90046001600160a01b03166001600160a01b03166341398b156040518163ffffffff1660e01b815260040160206040518083038186803b158015610b2e57600080fd5b505afa158015610b42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b669190610d75565b6001600160a01b03168152602001828152602001601260ff168152509150506104b0565b6040518060600160405280836001600160a01b03168152602001836001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610bdd57600080fd5b505afa158015610bf1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c199190810190610ebc565b8152602001836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610c5757600080fd5b505afa158015610c6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8f9190610f88565b60ff16905290506104b0565b6040518060600160405280610cae610d25565b8152602001610cd760405180606001604052806000815260200160008152602001600081525090565b8152602001610d0060405180606001604052806000815260200160008152602001600081525090565b905290565b6040518060400160405280610d18610d25565b8152602001600081525090565b604051806060016040528060006001600160a01b0316815260200160608152602001600060ff1681525090565b600060208284031215610d63578081fd5b8135610d6e816112a3565b9392505050565b600060208284031215610d86578081fd5b8151610d6e816112a3565b60006020808385031215610da3578182fd5b823567ffffffffffffffff811115610db9578283fd5b8301601f81018513610dc9578283fd5b8035610ddc610dd7826111f1565b6111c0565b8181528381019083850185840285018601891015610df8578687fd5b8694505b83851015610e23578035610e0f816112a3565b835260019490940193918501918501610dfc565b50979650505050505050565b60006020808385031215610e41578182fd5b825167ffffffffffffffff811115610e57578283fd5b8301601f81018513610e67578283fd5b8051610e75610dd7826111f1565b8181528381019083850185840285018601891015610e91578687fd5b8694505b83851015610e23578051610ea8816112a3565b835260019490940193918501918501610e95565b600060208284031215610ecd578081fd5b815167ffffffffffffffff80821115610ee4578283fd5b818401915084601f830112610ef7578283fd5b815181811115610f0957610f0961128d565b610f1c601f8201601f19166020016111c0565b9150808252856020828501011115610f32578384fd5b6108a081602084016020860161122c565b600060208284031215610f54578081fd5b5051919050565b600080600060608486031215610f6f578182fd5b8351925060208401519150604084015190509250925092565b600060208284031215610f99578081fd5b815160ff81168114610d6e578182fd5b80516001600160a01b0316825260208082015160408285018190528151818601819052600093919260608284028801810193929183019190880190865b8181101561106657605f198a8703018352835160e0815181895261100c828a0182611074565b91505086820151611033888a01828051825260208082015190830152604090810151910152565b509088015180516080890152602081015160a08901526040015160c0909701969096529284019291840191600101610fe6565b509398975050505050505050565b600060018060a01b03825116835260208201516060602085015280518060608601526110a781608087016020850161122c565b60409384015160ff16938501939093525050601f01601f19160160800190565b6000602080830181845280855180835260408601915060408482028701019250838701855b8281101561111a57603f19888603018452611108858351610fa9565b945092850192908501906001016110ec565b5092979650505050505050565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561118c57888303603f190185528151805187855261116f88860182611074565b91890151948901949094529487019492509086019060010161114b565b509098975050505050505050565b600060208252610d6e6020830184610fa9565b600060208252610d6e6020830184611074565b604051601f8201601f1916810167ffffffffffffffff811182821017156111e9576111e961128d565b604052919050565b600067ffffffffffffffff82111561120b5761120b61128d565b5060209081020190565b60008282101561122757611227611277565b500390565b60005b8381101561124757818101518382015260200161122f565b83811115611256576000848401525b50505050565b600060001982141561127057611270611277565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146112b857600080fd5b5056fea2646970667358221220ef9c9c46e50ba688d5de9a4c4ec5a4919d02e14a2497c4361c918397cf5bb1ad64736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getAllMarketRewardSpeeds(address[])": {
        "params": {
          "cTokens": "The market addresses"
        },
        "returns": {
          "_0": "The list of reward speed info"
        }
      },
      "getMarketRewardSpeeds(address)": {
        "params": {
          "cToken": "The market address"
        },
        "returns": {
          "_0": "The market reward speed info"
        }
      },
      "getRewardTokenInfo(address)": {
        "params": {
          "rewardToken": "The reward token address"
        },
        "returns": {
          "_0": "The reward token info"
        }
      },
      "getRewardsAvailable(address)": {
        "details": "This function is normally used by staticcall.",
        "params": {
          "account": "The user address"
        },
        "returns": {
          "_0": "The list of user available rewards"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAllMarketRewardSpeeds(address[])": {
        "notice": "Get all market reward speed info."
      },
      "getMarketRewardSpeeds(address)": {
        "notice": "Get reward speed info by market."
      },
      "getRewardTokenInfo(address)": {
        "notice": "Get reward token info."
      },
      "getRewardsAvailable(address)": {
        "notice": "Get user all available rewards."
      }
    },
    "notice": "LiquidityMiningLens This contract is mostly used by front-end to get LM contract information.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4374,
        "contract": "contracts/LiquidityMiningLens.sol:LiquidityMiningLens",
        "label": "liquidityMining",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(LiquidityMining)4366"
      }
    ],
    "types": {
      "t_contract(LiquidityMining)4366": {
        "encoding": "inplace",
        "label": "contract LiquidityMining",
        "numberOfBytes": "20"
      }
    }
  }
}