{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/ComptrollerInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface ComptrollerInterface {\n    function getAllMarkets() external view returns (address[] memory);\n    function markets(address) external view returns (bool, uint, uint);\n    function getAccountLiquidity(address) external view returns (uint, uint, uint);\n}\n"
    },
    "contracts/mocks/MockComptroller.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/ComptrollerInterface.sol\";\n\ncontract MockComptroller is ComptrollerInterface {\n    struct AccountLiquidity {\n        uint error;\n        uint shortfall;\n    }\n    mapping(address => AccountLiquidity) private _accounts;\n    mapping(address => bool) private _marketMap;\n    address[] private _markets;\n    address private _liquidityMining;\n\n    function addMarket(address market) external {\n        _markets.push(market);\n        _marketMap[market] = true;\n    }\n\n    function getAllMarkets() external override view returns (address[] memory) {\n        return _markets;\n    }\n\n    function markets(address market) external override view returns (bool, uint, uint) {\n        return (_marketMap[market], uint(0), uint(0));\n    }\n\n    function getAccountLiquidity(address account) external override view returns (uint, uint, uint) {\n        return (_accounts[account].error, uint(0), _accounts[account].shortfall); // liquidity is not important\n    }\n\n    function setLiquidityMining(address liquidityMining) external {\n        _liquidityMining = liquidityMining;\n    }\n\n    function setAccountLiquidity(address account, uint error, uint shortfall) external {\n        _accounts[account] = AccountLiquidity({\n            error: error,\n            shortfall: shortfall\n        });\n    }\n}\n\n"
    },
    "contracts/LiquidityMining.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"./LiquidityMiningStorage.sol\";\nimport \"./interfaces/ComptrollerInterface.sol\";\nimport \"./interfaces/CTokenInterface.sol\";\nimport \"./interfaces/LiquidityMiningInterface.sol\";\n\ncontract LiquidityMining is Initializable, UUPSUpgradeable, OwnableUpgradeable, LiquidityMiningStorage, LiquidityMiningInterface {\n    using SafeERC20 for IERC20;\n\n    uint internal constant initialIndex = 1e18;\n\n    /**\n     * @notice Emitted when a supplier's reward supply index is updated\n     */\n    event UpdateSupplierRewardIndex(\n        address indexed rewardToken,\n        address indexed cToken,\n        address indexed supplier,\n        uint rewards,\n        uint supplyIndex\n    );\n\n    /**\n     * @notice Emitted when a borrower's reward borrower index is updated\n     */\n    event UpdateBorrowerRewardIndex(\n        address indexed rewardToken,\n        address indexed cToken,\n        address indexed borrower,\n        uint rewards,\n        uint borrowIndex\n    );\n\n    /**\n     * @notice Emitted when a market's reward supply speed is updated\n     */\n    event UpdateSupplyRewardSpeed(\n        address indexed rewardToken,\n        address indexed cToken,\n        uint indexed speed,\n        uint start,\n        uint end\n    );\n\n    /**\n     * @notice Emitted when a market's reward borrow speed is updated\n     */\n    event UpdateBorrowRewardSpeed(\n        address indexed rewardToken,\n        address indexed cToken,\n        uint indexed speed,\n        uint start,\n        uint end\n    );\n\n    /**\n     * @notice Emitted when rewards are transferred to a user\n     */\n    event TransferReward(\n        address indexed rewardToken,\n        address indexed account,\n        address indexed receiver,\n        uint amount\n    );\n\n    /**\n     * @notice Emitted when a debtor is updated\n     */\n    event UpdateDebtor(\n        address indexed account,\n        bool indexed isDebtor\n    );\n\n    /**\n     * @notice Emitted when a reward receiver is updated\n     */\n    event UpdateRewardReceiver(\n        address indexed account,\n        address indexed receiver\n    );\n\n    struct UserMarkets {\n        address market;\n        bool supply;\n        bool borrow;\n    }\n\n    struct RewardTokenInfo {\n        address rewardTokenAddress;\n        string rewardTokenSymbol;\n        uint8 rewardTokenDecimals;\n    }\n\n    struct RewardAvailable {\n        RewardTokenInfo rewardToken;\n        uint amount;\n    }\n\n    struct RewardSpeedInfo {\n        RewardTokenInfo rewardToken;\n        RewardSpeed supplySpeed;\n        RewardSpeed borrowSpeed;\n    }\n\n    struct MarketRewardSpeed {\n        address cToken;\n        RewardSpeedInfo[] rewardSpeeds;\n    }\n\n    /**\n     * @notice Initialize the contract with admin and comptroller\n     */\n    function initialize(address _admin, address _comptroller) initializer public {\n        __Ownable_init();\n\n        comptroller = _comptroller;\n        transferOwnership(_admin);\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n     * @notice Return the current block timestamp.\n     * @return The current block timestamp\n     */\n    function getBlockTimestamp() public virtual view returns (uint) {\n        return block.timestamp;\n    }\n\n    /**\n     * @notice Return the reward token list.\n     * @return The list of reward token addresses\n     */\n    function getRewardTokenList() external view returns (address[] memory) {\n        return rewardTokens;\n    }\n\n    /**\n     * @notice Get reward token info.\n     * @param rewardToken The reward token address\n     * @return The reward token info\n     */\n    function getRewardTokenInfo(address rewardToken) public view returns (RewardTokenInfo memory) {\n        return RewardTokenInfo({\n            rewardTokenAddress: rewardToken,\n            rewardTokenSymbol: IERC20Metadata(rewardToken).symbol(),\n            rewardTokenDecimals: IERC20Metadata(rewardToken).decimals()\n        });\n    }\n\n    /**\n     * @notice Get reward speed info by market.\n     * @param cToken The market address\n     * @return The market reward speed info\n     */\n    function getMarketRewardSpeeds(address cToken) public view returns (MarketRewardSpeed memory) {\n        RewardSpeedInfo[] memory rewardSpeeds = new RewardSpeedInfo[](rewardTokens.length);\n        for (uint i = 0; i < rewardTokens.length; i++) {\n            rewardSpeeds[i] = RewardSpeedInfo({\n                rewardToken: getRewardTokenInfo(rewardTokens[i]),\n                supplySpeed: rewardSupplySpeeds[rewardTokens[i]][cToken],\n                borrowSpeed: rewardBorrowSpeeds[rewardTokens[i]][cToken]\n            });\n        }\n        return MarketRewardSpeed({\n            cToken: cToken,\n            rewardSpeeds: rewardSpeeds\n        });\n    }\n\n    /**\n     * @notice Get all market reward speed info.\n     * @return The list of reward speed info\n     */\n    function getAllMarketRewardSpeeds() public view returns (MarketRewardSpeed[] memory) {\n        address[] memory allMarkets = ComptrollerInterface(comptroller).getAllMarkets();\n        MarketRewardSpeed[] memory allRewardSpeeds = new MarketRewardSpeed[](allMarkets.length);\n        for (uint i = 0; i < allMarkets.length; i++) {\n            allRewardSpeeds[i] = getMarketRewardSpeeds(allMarkets[i]);\n        }\n        return allRewardSpeeds;\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /**\n     * @notice Check if the msg.sender is the account or the account delegate rewards receiver.\n     * @param account The account address\n     */\n    modifier onlyAccount(address account) {\n        if (rewardReceivers[account] != address(0)) {\n            require(msg.sender == rewardReceivers[account], \"unauthorized\");\n        } else {\n            require(msg.sender == account, \"unauthorized\");\n        }\n        _;\n    }\n\n    /**\n     * @notice Accrue rewards to the market by updating the supply index and calculate rewards accrued by suppliers\n     * @param cToken The market whose supply index to update\n     * @param suppliers The related suppliers\n     */\n    function updateSupplyIndex(address cToken, address[] memory suppliers) external override {\n        // Distribute the rewards right away.\n        updateSupplyIndexInternal(rewardTokens, cToken, suppliers, true);\n    }\n\n    /**\n     * @notice Accrue rewards to the market by updating the borrow index and calculate rewards accrued by borrowers\n     * @param cToken The market whose borrow index to update\n     * @param borrowers The related borrowers\n     */\n    function updateBorrowIndex(address cToken, address[] memory borrowers) external override {\n        // Distribute the rewards right away.\n        updateBorrowIndexInternal(rewardTokens, cToken, borrowers, true);\n    }\n\n    /**\n     * @notice Claim all the rewards accrued by holder in all markets\n     * @param account The account address\n     */\n    function claimAllRewards(address account) public onlyAccount(account) {\n        address[] memory allMarkets = ComptrollerInterface(comptroller).getAllMarkets();\n        return claimRewards(account, allMarkets, rewardTokens, true, true);\n    }\n\n    /**\n     * @notice Claim the rewards accrued by the account\n     * @param account The account address\n     * @param cTokens The list of markets to claim rewards in\n     * @param rewards The list of reward tokens to claim\n     * @param borrowers Whether or not to claim rewards earned by borrowing\n     * @param suppliers Whether or not to claim rewards earned by supplying\n     */\n    function claimRewards(address account, address[] memory cTokens, address[] memory rewards, bool borrowers, bool suppliers) public onlyAccount(account) {\n        require(!debtors[account], \"debtor is not allowed to claim rewards\");\n        for (uint i = 0; i < cTokens.length; i++) {\n            address cToken = cTokens[i];\n\n            address[] memory accounts = new address[](1);\n            accounts[0] = account;\n\n            // Same reward generated from multiple markets could aggregate and distribute once later for gas consumption.\n            if (borrowers) {\n                updateBorrowIndexInternal(rewards, cToken, accounts, false);\n            }\n            if (suppliers) {\n                updateSupplyIndexInternal(rewards, cToken, accounts, false);\n            }\n        }\n\n        // Distribute the rewards.\n        for (uint i = 0; i < rewards.length; i++) {\n            rewardAccrued[rewards[i]][account] = transferReward(rewards[i], account, rewardAccrued[rewards[i]][account]);\n        }\n    }\n\n    /**\n     * @notice Claim the rewards accrued by one account and a specifc reward token\n     * @dev This function is not efficient for claiming user rewards but it's useful to get the user related markets by using a staticcall.\n     * @param account The account address\n     * @param reward The reward token address\n     * @return The list of user related markets\n     */\n    function claimSingleReward(address account, address reward) public onlyAccount(account) returns (UserMarkets[] memory) {\n        require(rewardTokensMap[reward], \"reward token not support\");\n        require(!debtors[account], \"debtor is not allowed to claim rewards\");\n\n        address[] memory allMarkets = ComptrollerInterface(comptroller).getAllMarkets();\n        UserMarkets[] memory userMarkets = new UserMarkets[](allMarkets.length);\n        for (uint i = 0; i < allMarkets.length; i++) {\n            uint marketBorrowIndex = CTokenInterface(allMarkets[i]).borrowIndex();\n            updateGlobalBorrowIndex(reward, allMarkets[i], marketBorrowIndex);\n            bool affectBorrow = updateUserBorrowIndex(reward, allMarkets[i], account, marketBorrowIndex, true);\n\n            updateGlobalSupplyIndex(reward, allMarkets[i]);\n            bool affectSupply = updateUserSupplyIndex(reward, allMarkets[i], account, true);\n\n            userMarkets[i] = UserMarkets({\n                market: allMarkets[i],\n                supply: affectSupply,\n                borrow: affectBorrow\n            });\n        }\n        return userMarkets;\n    }\n\n    /**\n     * @notice Get user all available rewards.\n     * @dev This function is normally used by staticcall.\n     * @param account The user address\n     * @return The list of user available rewards\n     */\n    function getRewardsAvailable(address account) public onlyAccount(account) returns (RewardAvailable[] memory) {\n        uint[] memory beforeBalances = new uint[](rewardTokens.length);\n        RewardAvailable[] memory rewardAvailables = new RewardAvailable[](rewardTokens.length);\n\n        for (uint i = 0; i < rewardTokens.length; i++) {\n            beforeBalances[i] = IERC20(rewardTokens[i]).balanceOf(account);\n        }\n\n        claimAllRewards(account);\n\n        for (uint i = 0; i < rewardTokens.length; i++) {\n            uint newBalance = IERC20(rewardTokens[i]).balanceOf(account);\n            rewardAvailables[i] = RewardAvailable({\n                rewardToken: getRewardTokenInfo(rewardTokens[i]),\n                amount: newBalance - beforeBalances[i]\n            });\n        }\n        return rewardAvailables;\n    }\n\n    /* ========== ADMIN FUNCTIONS ========== */\n\n    /**\n     * @notice Update accounts to be debtors or not. Debtors couldn't claim rewards until their bad debts are repaid.\n     * @param accounts The list of accounts to be updated\n     */\n    function updateDebtors(address[] memory accounts) external onlyOwner {\n        for (uint i = 0; i < accounts.length; i++) {\n            address account = accounts[i];\n            (uint err, , uint shortfall) = ComptrollerInterface(comptroller).getAccountLiquidity(account);\n            require(err == 0, \"failed to get account liquidity from comptroller\");\n\n            if (shortfall > 0 && !debtors[account]) {\n                debtors[account] = true;\n                emit UpdateDebtor(account, true);\n            } else if (shortfall == 0 && debtors[account]) {\n                debtors[account] = false;\n                emit UpdateDebtor(account, false);\n            }\n        }\n    }\n\n    /**\n     * @notice Set the reward delegate receiver for an account\n     * @param account The account address\n     * @param receiver The receiver address\n     */\n    function setRewardsReceiver(address account, address receiver) external onlyOwner {\n        rewardReceivers[account] = receiver;\n\n        emit UpdateRewardReceiver(account, receiver);\n    }\n\n    /**\n     * @notice Add new reward token. Revert if the reward token has been added\n     * @param rewardToken The new reward token\n     */\n    function addRewardToken(address rewardToken) external onlyOwner {\n        require(!rewardTokensMap[rewardToken], \"reward token has been added\");\n        rewardTokensMap[rewardToken] = true;\n        rewardTokens.push(rewardToken);\n    }\n\n    /**\n     * @notice Set cTokens reward supply speeds\n     * @param rewardToken The reward token\n     * @param cTokens The addresses of cTokens\n     * @param speeds The list of reward speeds\n     * @param starts The list of start timestamps\n     * @param ends The list of end timestamps\n     */\n    function setRewardSupplySpeeds(address rewardToken, address[] memory cTokens, uint[] memory speeds, uint[] memory starts, uint[] memory ends) external onlyOwner {\n        _setRewardSpeeds(rewardToken, cTokens, speeds, starts, ends, true);\n    }\n\n    /**\n     * @notice Set cTokens reward borrow speeds\n     * @param rewardToken The reward token\n     * @param cTokens The addresses of cTokens\n     * @param speeds The list of reward speeds\n     * @param starts The list of start timestamps\n     * @param ends The list of end timestamps\n     */\n    function setRewardBorrowSpeeds(address rewardToken, address[] memory cTokens, uint[] memory speeds, uint[] memory starts, uint[] memory ends) external onlyOwner {\n        _setRewardSpeeds(rewardToken, cTokens, speeds, starts, ends, false);\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    /**\n     * @dev _authorizeUpgrade is used by UUPSUpgradeable to determine if it's allowed to upgrade a proxy implementation.\n     * @param newImplementation The new implementation\n     *\n     * Ref: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/utils/UUPSUpgradeable.sol\n     */\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\n\n    /**\n     * @notice Given the reward token list, accrue rewards to the market by updating the supply index and calculate rewards accrued by suppliers\n     * @param rewards The list of rewards to update\n     * @param cToken The market whose supply index to update\n     * @param suppliers The related suppliers\n     * @param distribute Distribute the reward or not\n     */\n    function updateSupplyIndexInternal(address[] memory rewards, address cToken, address[] memory suppliers, bool distribute) internal {\n        for (uint i = 0; i < rewards.length; i++) {\n            require(rewardTokensMap[rewards[i]], \"reward token not support\");\n            updateGlobalSupplyIndex(rewards[i], cToken);\n            for (uint j = 0; j < suppliers.length; j++) {\n                updateUserSupplyIndex(rewards[i], cToken, suppliers[j], distribute);\n            }\n        }\n    }\n\n    /**\n     * @notice Given the reward token list, accrue rewards to the market by updating the borrow index and calculate rewards accrued by borrowers\n     * @param rewards The list of rewards to update\n     * @param cToken The market whose borrow index to update\n     * @param borrowers The related borrowers\n     * @param distribute Distribute the reward or not\n     */\n    function updateBorrowIndexInternal(address[] memory rewards, address cToken, address[] memory borrowers, bool distribute) internal {\n        for (uint i = 0; i < rewards.length; i++) {\n            require(rewardTokensMap[rewards[i]], \"reward token not support\");\n\n            uint marketBorrowIndex = CTokenInterface(cToken).borrowIndex();\n            updateGlobalBorrowIndex(rewards[i], cToken, marketBorrowIndex);\n            for (uint j = 0; j < borrowers.length; j++) {\n                updateUserBorrowIndex(rewards[i], cToken, borrowers[j], marketBorrowIndex, distribute);\n            }\n        }\n    }\n\n    /**\n     * @notice Accrue rewards to the market by updating the supply index\n     * @param rewardToken The reward token\n     * @param cToken The market whose supply index to update\n     */\n    function updateGlobalSupplyIndex(address rewardToken, address cToken) internal {\n        RewardState storage supplyState = rewardSupplyState[rewardToken][cToken];\n        RewardSpeed memory supplySpeed = rewardSupplySpeeds[rewardToken][cToken];\n        uint timestamp = getBlockTimestamp();\n        if (timestamp > supplyState.timestamp) {\n            if (supplySpeed.speed == 0 || supplySpeed.start > timestamp || supplyState.timestamp > supplySpeed.end) {\n                // 1. The reward speed is zero,\n                // 2. The reward hasn't started yet,\n                // 3. The supply state has handled the end of the reward,\n                // just update the timestamp.\n                supplyState.timestamp = timestamp;\n            } else {\n                // fromTimestamp is the max of the last update block timestamp and the reward start block timestamp.\n                uint fromTimestamp = max(supplyState.timestamp, supplySpeed.start);\n                // toTimestamp is the min of the current block timestamp and the reward end block timestamp.\n                uint toTimestamp = min(timestamp, supplySpeed.end);\n                // deltaTime is the time difference used for calculating the rewards.\n                uint deltaTime = toTimestamp - fromTimestamp;\n                uint rewardAccrued = deltaTime * supplySpeed.speed;\n                uint totalSupply = CTokenInterface(cToken).totalSupply();\n                uint ratio = totalSupply > 0 ? rewardAccrued * 1e18 / totalSupply : 0;\n                uint index = supplyState.index + ratio;\n                rewardSupplyState[rewardToken][cToken] = RewardState({\n                    index: index,\n                    timestamp: timestamp\n                });\n            }\n        }\n    }\n\n    /**\n     * @notice Accrue rewards to the market by updating the borrow index\n     * @param rewardToken The reward token\n     * @param cToken The market whose borrow index to update\n     * @param marketBorrowIndex The market borrow index\n     */\n    function updateGlobalBorrowIndex(address rewardToken, address cToken, uint marketBorrowIndex) internal {\n        RewardState storage borrowState = rewardBorrowState[rewardToken][cToken];\n        RewardSpeed memory borrowSpeed = rewardBorrowSpeeds[rewardToken][cToken];\n        uint timestamp = getBlockTimestamp();\n        if (timestamp > borrowState.timestamp) {\n            if (borrowSpeed.speed == 0 || timestamp < borrowSpeed.start || borrowState.timestamp > borrowSpeed.end) {\n                // 1. The reward speed is zero,\n                // 2. The reward hasn't started yet,\n                // 3. The borrow state has handled the end of the reward,\n                // just update the timestamp.\n                borrowState.timestamp = timestamp;\n            } else {\n                // fromTimestamp is the max of the last update block timestamp and the reward start block timestamp.\n                uint fromTimestamp = max(borrowState.timestamp, borrowSpeed.start);\n                // toTimestamp is the min of the current block timestamp and the reward end block timestamp.\n                uint toTimestamp = min(timestamp, borrowSpeed.end);\n                // deltaTime is the time difference used for calculating the rewards.\n                uint deltaTime = toTimestamp - fromTimestamp;\n                uint rewardAccrued = deltaTime * borrowSpeed.speed;\n                uint totalBorrows = CTokenInterface(cToken).totalBorrows() * 1e18 / marketBorrowIndex;\n                uint ratio = totalBorrows > 0 ? rewardAccrued * 1e18 / totalBorrows : 0;\n                uint index = borrowState.index + ratio;\n                rewardBorrowState[rewardToken][cToken] = RewardState({\n                    index: index,\n                    timestamp: timestamp\n                });\n            }\n        }\n    }\n\n    /**\n     * @notice Calculate rewards accrued by a supplier and possibly transfer it to them\n     * @dev Suppliers will not begin to accrue until after the first interaction with the protocol.\n     * @param rewardToken The reward token\n     * @param cToken The market in which the supplier is interacting\n     * @param supplier The address of the supplier to distribute rewards to\n     * @param distribute Distribute the reward or not\n     * @return If the market will increase the user supply rewards after this update or not\n     */\n    function updateUserSupplyIndex(address rewardToken, address cToken, address supplier, bool distribute) internal returns (bool) {\n        RewardState memory supplyState = rewardSupplyState[rewardToken][cToken];\n        uint supplyIndex = supplyState.index;\n        uint supplierIndex = rewardSupplierIndex[rewardToken][cToken][supplier];\n        rewardSupplierIndex[rewardToken][cToken][supplier] = supplyIndex;\n\n        if (supplierIndex == 0 && supplyIndex > 0) {\n            supplierIndex = initialIndex;\n        }\n\n        if (supplierIndex > 0) {\n            uint deltaIndex = supplyIndex - supplierIndex;\n            uint supplierTokens = CTokenInterface(cToken).balanceOf(supplier);\n            uint supplierDelta = supplierTokens * deltaIndex / 1e18;\n            uint accruedAmount = rewardAccrued[rewardToken][supplier] + supplierDelta;\n            if (distribute) {\n                rewardAccrued[rewardToken][supplier] = transferReward(rewardToken, supplier, accruedAmount);\n            } else {\n                rewardAccrued[rewardToken][supplier] = accruedAmount;\n            }\n            emit UpdateSupplierRewardIndex(rewardToken, cToken, supplier, supplierDelta, supplyIndex);\n            return supplierDelta > 0;\n        }\n        return false;\n    }\n\n    /**\n     * @notice Calculate rewards accrued by a borrower and possibly transfer it to them\n     * @dev Borrowers will not begin to accrue until after the first interaction with the protocol.\n     * @param rewardToken The reward token\n     * @param cToken The market in which the borrower is interacting\n     * @param borrower The address of the borrower to distribute rewards to\n     * @param marketBorrowIndex The market borrow index\n     * @param distribute Distribute the reward or not\n     * @return If the market will increase the user borrow rewards after this update or not\n     */\n    function updateUserBorrowIndex(address rewardToken, address cToken, address borrower, uint marketBorrowIndex, bool distribute) internal returns (bool) {\n        RewardState memory borrowState = rewardBorrowState[rewardToken][cToken];\n        uint borrowIndex = borrowState.index;\n        uint borrowerIndex = rewardBorrowerIndex[rewardToken][cToken][borrower];\n        rewardBorrowerIndex[rewardToken][cToken][borrower] = borrowIndex;\n\n        if (borrowerIndex == 0 && borrowIndex > 0) {\n            borrowerIndex = initialIndex;\n        }\n\n        if (borrowerIndex > 0) {\n            uint deltaIndex = borrowIndex - borrowerIndex;\n            uint borrowerAmount = CTokenInterface(cToken).borrowBalanceStored(borrower) * 1e18 / marketBorrowIndex;\n            uint borrowerDelta = borrowerAmount * deltaIndex / 1e18;\n            uint accruedAmount = rewardAccrued[rewardToken][borrower] + borrowerDelta;\n            if (distribute) {\n                rewardAccrued[rewardToken][borrower] = transferReward(rewardToken, borrower, accruedAmount);\n            } else {\n                rewardAccrued[rewardToken][borrower] = accruedAmount;\n            }\n            emit UpdateBorrowerRewardIndex(rewardToken, cToken, borrower, borrowerDelta, borrowIndex);\n            return borrowerDelta > 0;\n        }\n        return false;\n    }\n\n    /**\n     * @notice Transfer rewards to the user\n     * @param rewardToken The reward token\n     * @param user The address of the user to transfer rewards to\n     * @param amount The amount of rewards to (possibly) transfer\n     * @return The amount of rewards which was NOT transferred to the user\n     */\n    function transferReward(address rewardToken, address user, uint amount) internal returns (uint) {\n        uint remain = IERC20(rewardToken).balanceOf(address(this));\n        if (amount > 0 && amount <= remain && !debtors[user]) {\n            address receiver = rewardReceivers[user];\n            if (receiver == address(0)) {\n                // Rewards delegate receiver not set, send rewards to the actual user.\n                receiver = user;\n            }\n\n            IERC20(rewardToken).safeTransfer(receiver, amount);\n            emit TransferReward(rewardToken, user, receiver, amount);\n            return 0;\n        }\n        return amount;\n    }\n\n    /**\n     * @notice Set reward speeds\n     * @param rewardToken The reward token\n     * @param cTokens The addresses of cTokens\n     * @param speeds The list of reward speeds\n     * @param starts The list of start timestamps\n     * @param ends The list of end timestamp\n     * @param supply It's supply speed or borrow speed\n     */\n    function _setRewardSpeeds(address rewardToken, address[] memory cTokens, uint[] memory speeds, uint[] memory starts, uint[] memory ends, bool supply) internal {\n        uint timestamp = getBlockTimestamp();\n        uint numMarkets = cTokens.length;\n        require(numMarkets != 0 && numMarkets == speeds.length && numMarkets == starts.length && numMarkets == ends.length, \"invalid input\");\n        require(rewardTokensMap[rewardToken], \"reward token was not added\");\n\n        for (uint i = 0; i < numMarkets; i++) {\n            address cToken = cTokens[i];\n            uint speed = speeds[i];\n            uint start = starts[i];\n            uint end = ends[i];\n            if (supply) {\n                if (isSupplyRewardStateInit(rewardToken, cToken)) {\n                    // Update the supply index.\n                    updateGlobalSupplyIndex(rewardToken, cToken);\n                } else {\n                    // Initialize the supply index.\n                    rewardSupplyState[rewardToken][cToken] = RewardState({\n                        index: initialIndex,\n                        timestamp: timestamp\n                    });\n                }\n\n                validateRewardContent(rewardSupplySpeeds[rewardToken][cToken], start, end);\n                rewardSupplySpeeds[rewardToken][cToken] = RewardSpeed({\n                    speed: speed,\n                    start: start,\n                    end: end\n                });\n                emit UpdateSupplyRewardSpeed(rewardToken, cToken, speed, start, end);\n            } else {\n                if (isBorrowRewardStateInit(rewardToken, cToken)) {\n                    // Update the borrow index.\n                    uint marketBorrowIndex = CTokenInterface(cToken).borrowIndex();\n                    updateGlobalBorrowIndex(rewardToken, cToken, marketBorrowIndex);\n                } else {\n                    // Initialize the borrow index.\n                    rewardBorrowState[rewardToken][cToken] = RewardState({\n                        index: initialIndex,\n                        timestamp: timestamp\n                    });\n                }\n\n                validateRewardContent(rewardBorrowSpeeds[rewardToken][cToken], start, end);\n                rewardBorrowSpeeds[rewardToken][cToken] = RewardSpeed({\n                    speed: speed,\n                    start: start,\n                    end: end\n                });\n                emit UpdateBorrowRewardSpeed(rewardToken, cToken, speed, start, end);\n            }\n        }\n    }\n\n    /**\n     * @notice Internal function to tell if the supply reward state is initialized or not.\n     * @param rewardToken The reward token\n     * @param cToken The market\n     * @return It's initialized or not\n     */\n    function isSupplyRewardStateInit(address rewardToken, address cToken) internal view returns (bool) {\n        return rewardSupplyState[rewardToken][cToken].index != 0 && rewardSupplyState[rewardToken][cToken].timestamp != 0;\n    }\n\n    /**\n     * @notice Internal function to tell if the borrow reward state is initialized or not.\n     * @param rewardToken The reward token\n     * @param cToken The market\n     * @return It's initialized or not\n     */\n    function isBorrowRewardStateInit(address rewardToken, address cToken) internal view returns (bool) {\n        return rewardBorrowState[rewardToken][cToken].index != 0 && rewardBorrowState[rewardToken][cToken].timestamp != 0;\n    }\n\n    /**\n     * @notice Internal function to check the new start block timestamp and the end block timestamp.\n     * @dev This function will revert if any validation failed.\n     * @param currentSpeed The current reward speed\n     * @param newStart The new start timestamp\n     * @param newEnd The new end block timestamp\n     */\n    function validateRewardContent(RewardSpeed memory currentSpeed, uint newStart, uint newEnd) internal view {\n        uint timestamp = getBlockTimestamp();\n        require(newEnd >= timestamp, \"the end timestamp must be greater than the current timestamp\");\n        require(newEnd >= newStart, \"the end timestamp must be greater than the start timestamp\");\n        if (timestamp < currentSpeed.end && timestamp > currentSpeed.start && currentSpeed.start != 0) {\n            require(currentSpeed.start == newStart, \"cannot change the start timestamp after the reward starts\");\n        }\n    }\n\n    /**\n     * @notice Internal function to get the min value of two.\n     * @param a The first value\n     * @param b The second value\n     * @return The min one\n     */\n    function min(uint a, uint b) internal pure returns (uint) {\n        if (a < b) {\n            return a;\n        }\n        return b;\n    }\n\n    /**\n     * @notice Internal function to get the max value of two.\n     * @param a The first value\n     * @param b The second value\n     * @return The max one\n     */\n    function max(uint a, uint b) internal pure returns (uint) {\n        if (a > b) {\n            return a;\n        }\n        return b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal initializer {\n        __ERC1967Upgrade_init_unchained();\n        __UUPSUpgradeable_init_unchained();\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal initializer {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallSecure(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/LiquidityMiningStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ncontract LiquidityMiningStorage {\n    /// @notice The comptroller that wants to distribute rewards.\n    address public comptroller;\n\n    /// @notice The support reward tokens.\n    address[] public rewardTokens;\n\n    /// @notice The support reward tokens.\n    mapping(address => bool) public rewardTokensMap;\n\n    struct RewardSpeed {\n        uint speed;\n        uint start;\n        uint end;\n    }\n\n    /// @notice The reward speeds of each reward token for every supply market\n    mapping(address => mapping(address => RewardSpeed)) public rewardSupplySpeeds;\n\n    /// @notice The reward speeds of each reward token for every borrow market\n    mapping(address => mapping(address => RewardSpeed)) public rewardBorrowSpeeds;\n\n    struct RewardState {\n        uint index;\n        uint timestamp;\n    }\n\n    /// @notice The market reward supply state for each market\n    mapping(address => mapping(address => RewardState)) public rewardSupplyState;\n\n    /// @notice The market reward borrow state for each market\n    mapping(address => mapping(address => RewardState)) public rewardBorrowState;\n\n    /// @notice The supply index for each market for each supplier as of the last time they accrued rewards\n    mapping(address => mapping(address => mapping(address => uint))) public rewardSupplierIndex;\n\n    /// @notice The borrow index for each market for each borrower as of the last time they accrued rewards\n    mapping(address => mapping(address => mapping(address => uint))) public rewardBorrowerIndex;\n\n    /// @notice The reward accrued but not yet transferred to each user\n    mapping(address => mapping(address => uint)) public rewardAccrued;\n\n    /// @notice The debtors who can't claim rewards until their bad debts are repaid.\n    mapping(address => bool) public debtors;\n\n    /// @notice The reward delegate receiver of users.\n    mapping(address => address) public rewardReceivers;\n}\n"
    },
    "contracts/interfaces/CTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface CTokenInterface {\n    function balanceOf(address owner) external view returns (uint);\n    function borrowBalanceStored(address account) external view returns (uint);\n    function borrowIndex() external view returns (uint);\n    function totalSupply() external view returns (uint);\n    function totalBorrows() external view returns (uint);\n}\n"
    },
    "contracts/interfaces/LiquidityMiningInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @dev LiquidityMiningInterface is for comptroller\ninterface LiquidityMiningInterface {\n    function updateSupplyIndex(address cToken, address[] memory accounts) external;\n    function updateBorrowIndex(address cToken, address[] memory accounts) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\n    function __ERC1967Upgrade_init() internal initializer {\n        __ERC1967Upgrade_init_unchained();\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal initializer {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            _functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "contracts/mocks/MockLiquidityMining.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../LiquidityMining.sol\";\n\ncontract MockLiquidityMining is LiquidityMining {\n    uint private _blockTimestamp;\n\n    function setBlockTimestamp(uint timestamp) external {\n        _blockTimestamp = timestamp;\n    }\n\n    function getBlockTimestamp() public override view returns (uint) {\n        return _blockTimestamp;\n    }\n\n    function harnessTransferReward(address rewardToken, address user, uint amount) external returns (uint) {\n        return transferReward(rewardToken, user, amount);\n    }\n\n    function harnessUpdateGlobalSupplyIndex(address rewardToken, address cToken) external {\n        updateGlobalSupplyIndex(rewardToken, cToken);\n    }\n\n    function harnessUpdateGlobalBorrowIndex(address rewardToken, address cToken) external {\n        uint marketBorrowIndex = CTokenInterface(cToken).borrowIndex();\n        updateGlobalBorrowIndex(rewardToken, cToken, marketBorrowIndex);\n    }\n}\n"
    },
    "contracts/mocks/LiquidityMiningExtension.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../LiquidityMining.sol\";\n\ncontract LiquidityMiningExtension is LiquidityMining {\n    function test() public pure returns (string memory) {\n        return \"test\";\n    }\n}\n"
    },
    "contracts/mocks/MockCToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/CTokenInterface.sol\";\n\ncontract MockCToken is CTokenInterface {\n    mapping(address => uint) private _balances;\n    mapping(address => uint) private _borrowBalances;\n    uint private _borrowIndex;\n    uint private _totalSupply;\n    uint private _totalBorrows;\n\n    function setBalance(address account, uint balance) external {\n        _balances[account] = balance;\n    }\n\n    function balanceOf(address account) external override view returns (uint) {\n        return _balances[account];\n    }\n\n    function setBorrowBalance(address account, uint balance) external {\n        _borrowBalances[account] = balance;\n    }\n\n    function borrowBalanceStored(address account) external override view returns (uint) {\n        return _borrowBalances[account];\n    }\n\n    function setBorrowIndex(uint value) external {\n        _borrowIndex = value;\n    }\n\n    function borrowIndex() external override view returns (uint) {\n        return _borrowIndex;\n    }\n\n    function setTotalSupply(uint value) external {\n        _totalSupply = value;\n    }\n\n    function totalSupply() external override view returns (uint) {\n        return _totalSupply;\n    }\n\n    function setTotalBorrows(uint value) external {\n        _totalBorrows = value;\n    }\n\n    function totalBorrows() external override view returns (uint) {\n        return _totalBorrows;\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            Address.functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "contracts/LiquidityMiningProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\n\ncontract LiquidityMiningProxy is ERC1967Proxy {\n    constructor(address _logic, bytes memory _data) ERC1967Proxy(_logic, _data) {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/mocks/MockRewardToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockRewardToken is ERC20 {\n    constructor () ERC20(\"Reward Token\", \"REWARD\") {\n        _mint(msg.sender, 10000 ** uint(decimals()));\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}